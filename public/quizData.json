[
  {
    "ID": 1,
    "category": "js",
    "question": "JavaScriptで配列を宣言するには次のうちどの記号を使用するでしょう？",
    "choices1": "{ }",
    "choices2": "[ ]",
    "choices3": "( )",
    "choices4": "< >",
    "answer": "[ ]",
    "explanation": "JavaScriptでは配列を宣言するため[ ]を使用します。角かっこ内に要素をカンマ区切りで記述することで中身を追加することができます。"
  },
  {
    "ID": 2,
    "category": "js",
    "question": "JavaScriptの変数を宣言するために使う言葉は次のうちどれでしょう？",
    "choices1": "let",
    "choices2": "var",
    "choices3": "const",
    "choices4": "let,varの両方",
    "answer": "let,varの両方",
    "explanation": "JavaScriptでは変数を宣言するために、let、varのキーワードを使用します。 letはブロックスコープの変数、varはグローバルスコープの変数を宣言するために使用されます。"
  },
  {
    "ID": 3,
    "category": "css",
    "question": "CSSで要素のテキストの色を指定するために使用されるプロパティは次のうちどれでしょう？",
    "choices1": "font-size",
    "choices2": "background-color",
    "choices3": "color",
    "choices4": "text-align",
    "answer": "color",
    "explanation": "CSSのcolorプロパティを使用すると、要素内のテキストの色を指定することができます。 色はキーワード名やRGB値、16進数値などで指定できます。"
  },
  {
    "ID": 4,
    "category": "css",
    "question": "CSSで要素の高さを指定するために使用されるプロパティは次のうちどれでしょう？",
    "choices1": "width",
    "choices2": "height",
    "choices3": "size",
    "choices4": "dimension",
    "answer": "height",
    "explanation": "CSSのheightプロパティを使用すると、要素の高さを指定することができます。 このプロパティはピクセル単位やパーセンテージなどで値を指定します。"
  },
  {
    "ID": 5,
    "category": "js",
    "question": "JavaScriptは次のうちどのタイプの言語でしょう？",
    "choices1": "コンパイラ言語",
    "choices2": "インタプリタ言語",
    "choices3": "アセンブリ言語",
    "choices4": "仮想マシン言語",
    "answer": "インタプリタ言語",
    "explanation": "JavaScriptはインタプリタ言語の一種です。 インタプリタ言語はソースコードを逐次解釈しながら実行するため、コンパイラ言語とは異なり実行のたびにソースコードを解釈して実行します。"
  },
  {
    "ID": 6,
    "category": "css",
    "question": "CSSの略称「CSS」は何の略でしょう？",
    "choices1": "カスケーディングスタイルスクリプト",
    "choices2": "カスケーディングスタイルシート",
    "choices3": "セントラルスタイルシート",
    "choices4": "コンピュータースタイルシート",
    "answer": "カスケーディングスタイルシート",
    "explanation": "CSSは「Cascading Style Sheet」の略であり、Webページのスタイルやレイアウトを指定するためのスタイルシート言語です。"
  },
  {
    "ID": 7,
    "category": "react",
    "question": "Reactで状態管理をするために使用されるオブジェクトは次のうちどれですか？",
    "choices1": "state",
    "choices2": "props",
    "choices3": "methods",
    "choices4": "hooks",
    "answer": "state",
    "explanation": "Reactでは、コンポーネントの状態を管理するためにstateオブジェクトを使用します。 stateはコンポーネント内で変更可能な値を保持し、UIの状態を反映させるために利用されます。"
  },
  {
    "ID": 8,
    "category": "react",
    "question": "Reactでコンポーネント間のデータの受け渡しに使用されるメカニズムは次のうちどれでしょう？",
    "choices1": "event listeners",
    "choices2": "REST API",
    "choices3": "Redux",
    "choices4": "props",
    "answer": "props",
    "explanation": "Reactでは、親コンポーネントから子コンポーネントにデータを渡すためにpropsを使用します。 propsを使ってデータを受け渡すことで、コンポーネント間で情報の共有や連携を行うことができます。"
  },
  {
    "ID": 9,
    "category": "typescript",
    "question": "TypeScriptは次のうちどのタイプのプログラミング言語でしょう？",
    "choices1": "動的型付け言語",
    "choices2": "マークアップ言語",
    "choices3": "プロトタイプ言語",
    "choices4": "静的型付け言語",
    "answer": "静的型付け言語",
    "explanation": "TypeScriptはJavaScriptの上に構築された静的型付け言語であり、変数や関数の型を明示的に宣言することができます。"
  },
  {
    "ID": 10,
    "category": "typescript",
    "question": "TypeScriptで変数の型を宣言するために使用されるキーワードは次のうちどれでしょう？",
    "choices1": "let",
    "choices2": "var",
    "choices3": "const",
    "choices4": "type",
    "answer": "type",
    "explanation": "TypeScriptで変数の型を宣言するためには、「type」キーワードを使用します。 型宣言によって変数の値の種類や形式を明示的に指定することができます。"
  },
  {
    "ID": 11,
    "category": "typescript",
    "question": "TypeScriptではJavaScriptと比べて次のような利点がありますが、どれでしょう？",
    "choices1": "クライアントサイドでの実行が高速",
    "choices2": "プロトタイプの継承が容易",
    "choices3": "開発中のエラーを事前に検出しやすい",
    "choices4": "ブラウザ互換性が高い",
    "answer": "開発中のエラーを事前に検出しやすい",
    "explanation": "TypeScriptは静的型付けを行うため、開発中のエラーを事前に検出しやすくします。 コンパイル時に型チェックが行われ、タイプミスや予期しない値の使用などのエラーを見つけることができます。"
  },
  {
    "ID": 12,
    "category": "react",
    "question": "Reduxは次のうちどのタイプの状態管理ライブラリでしょう？",
    "choices1": "バックエンドライブラリ",
    "choices2": "フロントエンドライブラリ",
    "choices3": "データベースライブラリ",
    "choices4": "状態管理ライブラリ",
    "answer": "状態管理ライブラリ",
    "explanation": "ReduxはJavaScriptの状態管理ライブラリであり、複雑なアプリケーションの状態を一元管理するための仕組みを構築することができます。"
  },
  {
    "ID": 13,
    "category": "react",
    "question": "Reduxで状態の変更を行うために使用されるオブジェクトは次のうちどれでしょう？",
    "choices1": "action",
    "choices2": "reducer",
    "choices3": "store",
    "choices4": "dispatch",
    "answer": "action",
    "explanation": "Reduxでは状態の変更を行うために、アクションと呼ばれるオブジェクトが使用されます。 アクションは状態変更のトリガーとなり、実際の変更内容を持つプレーンなJavaScriptオブジェクトです。"
  },
  {
    "ID": 14,
    "category": "other",
    "question": "ウェブサイトのレスポンシブデザインとは何を指す言葉でしょうか？",
    "choices1": "ウェブサイトが様々なデバイスや画面サイズに適応する能力",
    "choices2": "ウェブサイトのパフォーマンスを最適化する技術",
    "choices3": "ウェブサイトのセキュリティを強化する手法",
    "choices4": "ウェブサイトのデザインを一貫性のあるものにする原則",
    "answer": "ウェブサイトが様々なデバイスや画面サイズに適応する能力",
    "explanation": "レスポンシブデザインは、ウェブサイトが異なるデバイス（デスクトップ、タブレット、スマートフォンなど）や画面サイズに適応する能力を指します。 これによりユーザーはどんなデバイスでウェブサイトを閲覧しても快適な表示と使いやすさを得ることができます。"
  },
  {
    "ID": 15,
    "category": "other",
    "question": "ウェブサイトのセキュリティを強化するために使用されるプロトコルは次のうちどれでしょう？",
    "choices1": "HTML",
    "choices2": "CSS",
    "choices3": "SSL/TLS",
    "choices4": "HTTP",
    "answer": "SSL/TLS",
    "explanation": "SSL（Secure Sockets Layer）とTLS（Transport Layer Security）はウェブサイトのセキュリティを強化するためのプロトコルです。 SSL/TLSを使用するとウェブサイトとユーザーの間の通信が暗号化されデータの盗聴や改ざんを防ぎます。 またドメインのプロトコルをhttp→httpsにすることをSSL化とも呼びます。"
  },
  {
    "ID": 16,
    "category": "css",
    "question": "ウェブサイトのアニメーションや動きを制御するために使用されるCSSの機能は次のうちどれでしょう？",
    "choices1": "Flexbox",
    "choices2": "Grid",
    "choices3": "Transitions",
    "choices4": "Selectors",
    "answer": "Transitions",
    "explanation": "CSSのTransitionsは要素の状態変化（例：ホバーやクリック）時にアニメーションやスムーズな遷移効果を追加する機能です。 Transitionsを使用すると、要素の位置、サイズ、色などのプロパティを制御し、動きのあるウェブサイトを作成できます。"
  },
  {
    "ID": 17,
    "category": "html",
    "question": "HTMLフォームの入力欄にユーザーが入力するテキストを制限するために使用される属性は次のうちどれでしょう？",
    "choices1": "placeholder",
    "choices2": "required",
    "choices3": "maxlength",
    "choices4": "autocomplete",
    "answer": "maxlength",
    "explanation": "<input>要素の属性として使用されるmaxlengthは、ユーザーが入力できるテキストの最大文字数を指定します。 この属性を使用することで、テキストの長さを制限し、入力欄のサイズを制御することができます。"
  },
  {
    "ID": 18,
    "category": "css",
    "question": "CSSで要素の背景色を透明にするために使用されるプロパティは次のうちどれでしょう？",
    "choices1": "#fff",
    "choices2": "white",
    "choices3": "transparent",
    "choices4": "auto",
    "answer": "transparent",
    "explanation": "背景色を透明にするためには、background-colorプロパティを \"transparent\" に設定します。 これにより、要素の背景色が透明になり、下の要素や背景が表示されます。"
  },
  {
    "ID": 19,
    "category": "css",
    "question": "CSSで要素の間にスペースを追加するために使用されるプロパティは次のうちどれでしょう？",
    "choices1": "padding",
    "choices2": "margin",
    "choices3": "border",
    "choices4": "width",
    "answer": "margin",
    "explanation": "marginプロパティは要素の外側にスペース（余白）を追加するために使用されます。 marginを調整することで、要素の周囲にスペースを作成することができます。"
  },
  {
    "ID": 20,
    "category": "css",
    "question": "CSSの\"box-sizing\"プロパティは何を指定するために使用されるでしょう？",
    "choices1": "ボックスの幅と高さを指定するための単位",
    "choices2": "ボックスの境界ボックスを指定するためのプロパティ",
    "choices3": "ボックスの内側の余白とボーダーを含めた幅と高さを指定するためのプロパティ",
    "choices4": "ボックスの位置を指定するためのプロパティ",
    "answer": "ボックスの内側の余白とボーダーを含めた幅と高さを指定するためのプロパティ",
    "explanation": "\"box-sizing\"プロパティは、ボックスのサイズ計算方法を指定します。 \"box-sizing: border-box;\"を使用すると、内側の余白とボーダーを含めた全体の幅と高さが指定されます。"
  },
  {
    "ID": 21,
    "category": "css",
    "question": "CSSの\"z-index\"プロパティは何を制御するために使用されるでしょう？",
    "choices1": "テキストの重ね順",
    "choices2": "要素の透明度",
    "choices3": "要素のサイズ",
    "choices4": "要素の位置",
    "answer": "テキストの重ね順",
    "explanation": "\"z-index\"プロパティは、要素の重なり順を制御するために使用されます。 値が大きいほど要素が上に表示され、positionプロパティの値が\"absolute\"、\"relative\"、または\"fixed\"である要素に対して使用されます。"
  },
  {
    "ID": 22,
    "category": "html",
    "question": "HTMLのiframeタグは何を行うために使用されることが多いでしょう？",
    "choices1": "外部ウェブページの埋め込み",
    "choices2": "テキストの装飾",
    "choices3": "ページ内リンクの作成",
    "choices4": "フォームの作成",
    "answer": "外部ウェブページの埋め込み",
    "explanation": "iframeタグは主に、別のHTMLページや外部ウェブページを現在のページに埋め込むために使用されます。 例えば、Google マップやYouTubeのビデオを埋め込む場合によく使用されます。"
  },
  {
    "ID": 23,
    "category": "html",
    "question": "HTMLのformタグのmethod属性は何を指定するために使用されるでしょう？",
    "choices1": "ウェブページ内のセクションを識別するための識別子",
    "choices2": "フォームデータの送信方法を指定する",
    "choices3": "フォームのデフォルト値を指定する",
    "choices4": "フォーム内の項目の並び順を指定する",
    "answer": "フォームデータの送信方法を指定する",
    "explanation": "method属性はformタグ内のデータを送信する方法を指定します。 一般的な値は \"GET\" と \"POST\" であり、\"GET\" はデータをURLのクエリパラメータとして送信し、\"POST\" はデータをリクエストボディに含めて送信します。"
  },
  {
    "ID": 24,
    "category": "html",
    "question": "HTMLのimgタグのalt属性は何のために使用されるでしょう？",
    "choices1": "画像の表示サイズを指定する",
    "choices2": "画像の代替テキストを提供する",
    "choices3": "画像のリンク先を指定する",
    "choices4": "画像のキャプションを指定する",
    "answer": "画像の代替テキストを提供する",
    "explanation": "alt属性はimgタグで表示できない場合やスクリーンリーダーを使用している場合に代替テキストとして表示されます。 この属性は、視覚的に情報を受け取れないユーザーに対して画像の内容を伝えるために重要です。"
  },
  {
    "ID": 25,
    "category": "js",
    "question": "JavaScriptのPromiseオブジェクトは何を行うために使用されるでしょう？",
    "choices1": "非同期処理の制御と結果のハンドリング",
    "choices2": "配列の要素のフィルタリング",
    "choices3": "文字列の操作と変換",
    "choices4": "データのソートと並び替え",
    "answer": "非同期処理の制御と結果のハンドリング",
    "explanation": "Promiseオブジェクトは、非同期処理の結果を表現し、その結果をハンドリングするために使用されます。 Promiseは通常、非同期関数やAPI呼び出しなどの処理が完了するまで待機し、成功や失敗の結果を処理するためのコールバック関数を提供します。"
  },
  {
    "ID": 26,
    "category": "js",
    "question": "JavaScriptのlocalStorageは何を行うために使用されることが多いでしょう？",
    "choices1": "セッション間のデータの保持",
    "choices2": "ユーザーの位置情報の計算",
    "choices3": "サーバーとのデータの同期",
    "choices4": "ページ内の要素の隠しと表示",
    "answer": "セッション間のデータの保持",
    "explanation": "localStorageは、ブラウザにデータを保存するために使用されます。 このデータはセッション間に保持され、設定次第ではページのリロードやブラウザの再起動後も継続して利用することができます。"
  },
  {
    "ID": 27,
    "category": "js",
    "question": "JavaScriptのbindメソッドは何を行うために使用されるでしょう？",
    "choices1": "関数を特定のオブジェクトに割り当てる",
    "choices2": "配列の要素を結合する",
    "choices3": "文字列を分割する",
    "choices4": "オブジェクトのプロパティを削除する",
    "answer": "関数を特定のオブジェクトに割り当てる",
    "explanation": "bindメソッドは、関数の実行コンテキストを指定するために使用されます。 このメソッドを使用すると、関数を特定のオブジェクトに割り当てて、そのオブジェクトが関数内の\"this\"キーワードとして参照されるようにすることができます。"
  },
  {
    "ID": 28,
    "category": "html",
    "question": "HTMLのarticleタグは何のために使用されることが多いでしょう？",
    "choices1": "作成者の情報の表示",
    "choices2": "主要なコンテンツのセクションの表示",
    "choices3": "ナビゲーションメニューの表示",
    "choices4": "特定の時間枠を指定したコンテンツの表示",
    "answer": "主要なコンテンツのセクションの表示",
    "explanation": "articleタグは、独立したコンテンツのセクションを表すために使用されます。 例えばブログ記事、ニュース記事、フォーラムの投稿などがあります。"
  },
  {
    "ID": 29,
    "category": "js",
    "question": "JavaScriptのtypeofは何をするためのものでしょう？",
    "choices1": "型を返す",
    "choices2": "値を比較する",
    "choices3": "初期化する",
    "choices4": "スコープを確認する",
    "answer": "型を返す",
    "explanation": "typeofは、与えられたオペランドのデータ型を評価し、その型の文字列を返します。 例えば、\"typeof variable\"のように使用すると、変数の型（\"string\"、\"number\"、\"boolean\"など）が返されます。"
  },
  {
    "ID": 30,
    "category": "js",
    "question": "JavaScriptのmapメソッドは何をするためのメソッドでしょう？",
    "choices1": "配列の各要素に対して指定された関数を適用し、新しい配列を作成する",
    "choices2": "文字列を指定した区切り文字で分割し、新しい配列を作成する",
    "choices3": "配列から指定された要素を削除する",
    "choices4": "配列内の要素をソートする",
    "answer": "配列の各要素に対して指定された関数を適用し、新しい配列を作成する",
    "explanation": "mapメソッドは、与えられた配列の各要素に対して指定された関数を適用し、その結果を新しい配列として返します。 元の配列は変更されず、新しい配列が作成されるため、元のデータを変更せずに変換処理を行うのに便利です。"
  },
  {
    "ID": 31,
    "category": "js",
    "question": "JavaScriptのsetTimeoutメソッドは何をするためのメソッドでしょう？",
    "choices1": "指定された時間後に関数を非同期に実行する",
    "choices2": "配列内の要素を反転する",
    "choices3": "指定された時間ごとに関数を繰り返し実行する",
    "choices4": "関数を同期的に実行する",
    "answer": "指定された時間後に関数を非同期に実行する",
    "explanation": "setTimeoutメソッドは、指定された時間（ミリ秒）が経過した後に指定された関数を非同期に実行します。 この関数は特定の遅延実行を実現するために使用され、タイマーイベントを操作する際によく活用されます。"
  },
  {
    "ID": 32,
    "category": "js",
    "question": "JavaScriptのthisは何を参照するものでしょう？",
    "choices1": "現在の関数内でのみ参照可能な変数",
    "choices2": "グローバルオブジェクトを参照する",
    "choices3": "オブジェクト内でのみ参照可能なプロパティ",
    "choices4": "現在の関数内のオブジェクトを参照する",
    "answer": "現在の関数内のオブジェクトを参照する",
    "explanation": "thisは、JavaScriptの実行コンテキスト内で使用され、そのコンテキスト内の現在のオブジェクトを参照します。 具体的な参照先は、関数の呼び出し方法やオブジェクトのメソッド内での使用方法によって異なります。"
  },
  {
    "ID": 33,
    "category": "html",
    "question": "HTML内で要素に一意の識別子を指定するために使用される属性は次のうちどれでしょう？",
    "choices1": "class属性",
    "choices2": "id属性",
    "choices3": "src属性",
    "choices4": "href属性",
    "answer": "id属性",
    "explanation": "id属性はHTML要素に一意の識別子を指定するために使用されます。 id属性の値は重複することはありません。"
  },
  {
    "ID": 34,
    "category": "css",
    "question": "CSSで要素にスタイルを適用するために使用されるセレクタは次のうちどれでしょう？",
    "choices1": "タグ名",
    "choices2": "class",
    "choices3": "id",
    "choices4": "全ての選択肢が正しい",
    "answer": "全ての選択肢が正しい",
    "explanation": "CSSでは、要素にスタイルを適用するためにさまざまなセレクタが使用されます。 タグ名は特定のHTML要素を選択し、classセレクタはクラス属性を持つ要素を選択し、idセレクタはid属性を持つ要素を選択します。 これらのセレクタを組み合わせて要素を選択し、スタイルを適用することができます。"
  },
  {
    "ID": 35,
    "category": "css",
    "question": "Sassを使ったコーディングで.scssのファイルをコンパイルする何という拡張子のファイルになるでしょう？",
    "choices1": ".css",
    "choices2": ".html",
    "choices3": ".js",
    "choices4": ".min.css",
    "answer": ".css",
    "explanation": ".scssファイルをコンパイルすると.cssファイルが生成されます。 ブラウザには.cssファイルの方が読み込まれることで.scssファイルに記載してあるスタイルが反映されます。"
  },
  {
    "ID": 36,
    "category": "css",
    "question": "CSSのセレクタの中で、最も優先度が高いのはどれでしょう？",
    "choices1": "タグセレクタ（例: div, p）",
    "choices2": "クラスセレクタ（例: .my-class）",
    "choices3": "IDセレクタ（例: #my-id）",
    "choices4": "!important修飾子（例: color: red !important;）",
    "answer": "!important修飾子（例: color: red !important;）",
    "explanation": "!important修飾子は、特定のCSSプロパティに対して優先度を付与します。 ただし、!importantの乱用は避けるべきであり、適切なセレクタの使用やスタイルの組織化を優先するべきです。"
  },
  {
    "ID": 37,
    "category": "css",
    "question": "CSSのフレキシブルボックスレイアウト（Flexbox）は何を行うために使用されることが多いでしょう？",
    "choices1": "要素の水平方向の配置を制御する",
    "choices2": "要素のイベントを制御する",
    "choices3": "要素のスクロール動作を制御する",
    "choices4": "要素の境界線と背景色を設定する",
    "answer": "要素の水平方向の配置を制御する",
    "explanation": "Flexboxは、要素を柔軟に配置するためのCSSレイアウトモジュールです。 特に、水平方向の要素の配置に焦点を当てており、要素の並び順や間隔、アイテムの拡大縮小などを制御することができます。これにより、レスポンシブデザインや複雑なレイアウトの作成が容易になります。"
  },
  {
    "ID": 38,
    "category": "css",
    "question": "CSSの\"flexbox\"レイアウトにおいて、要素を水平方向に中央揃えするために使用するプロパティはどれでしょう？",
    "choices1": "align-items",
    "choices2": "justify-content",
    "choices3": "align-self",
    "choices4": "flex-direction",
    "answer": "justify-content",
    "explanation": "justify-contentプロパティは、flexコンテナ内の要素を水平方向に中央揃えするために使用されます justify-content: center; を指定すると、要素が水平方向に中央に配置されます。"
  },
  {
    "ID": 39,
    "category": "html",
    "question": "HTMLの\"accesskey\"属性は何のために使用されるでしょう？",
    "choices1": "要素のテキストを強調する",
    "choices2": "要素のアクセスキーを指定する",
    "choices3": "要素のタブインデックスを指定する",
    "choices4": "要素のツールチップを表示する",
    "answer": "要素のアクセスキーを指定する",
    "explanation": "accesskey属性は、キーボードショートカットを提供するために使用されます。 指定されたキーを押すことで、対応する要素にフォーカスを移動したり、リンクをクリックしたりすることができます。"
  },
  {
    "ID": 40,
    "category": "js",
    "question": "JavaScriptのprototypeプロパティは何を行うために使用されることが多いでしょう？",
    "choices1": "HTMLタグを追加または変更するために使用される",
    "choices2": "クラスのインスタンスを作成するために使用される",
    "choices3": "オブジェクトのメソッドを追加または変更するために使用される",
    "choices4": "変数のスコープを制御するために使用される",
    "answer": "オブジェクトのメソッドを追加または変更するために使用される",
    "explanation": "prototypeプロパティは、JavaScriptのオブジェクトのプロトタイプを指定します。 プロトタイプは、オブジェクトが持つメソッドやプロパティの集合です。 prototypeプロパティを使用してメソッドを定義すると、そのメソッドはオブジェクトのすべてのインスタンスで共有されます。"
  },
  {
    "ID": 41,
    "category": "js",
    "question": "JavaScriptのasync/awaitは何を行うために使用されますか？",
    "choices1": "非同期コードを実行するために使用される",
    "choices2": "条件に基づいてコードの実行を制御するために使用される",
    "choices3": "オブジェクトのプロパティにアクセスするために使用される",
    "choices4": "変数の値を変更するために使用される",
    "answer": "非同期コードを実行するために使用される",
    "explanation": "async/awaitは、非同期コードをより直感的に扱うために導入されました。 asyncを関数の前に付けると、その関数は非同期的な処理を含むことが示されます。 非同期処理の結果を待つためにawaitを使用し、非同期処理が完了するまでスクリプトの実行が一時停止されます。"
  },
  {
    "ID": 42,
    "category": "html",
    "question": "HTMLのfigcaptionタグは何のために使用されるでしょう？",
    "choices1": "画像のキャプション",
    "choices2": "フォームのラベル",
    "choices3": "ページのタイトル",
    "choices4": "テキストの引用",
    "answer": "画像のキャプション",
    "explanation": " figcaptionタグは<figure>要素内に配置され、画像のキャプションを表すために使用されます。 通常<figure>要素は画像やイラストなどのメディアコンテンツをグループ化するために使用され、<figcaption>はそのコンテンツの説明やキャプションを提供します。"
  },
  {
    "ID": 43,
    "category": "react",
    "question": "ReactのHooksの一つで、コンポーネントの状態を管理するために使用されるのは次のうちどれでしょう？",
    "choices1": "useState()",
    "choices2": "useEffect()",
    "choices3": "useContext()",
    "choices4": "useReducer()",
    "answer": "useState()",
    "explanation": "useState()フックは、関数コンポーネント内で状態を管理するために使用されます。 このフックを使用すると、状態の値とその値を更新するための関数が提供されます。状態の変更に応じてコンポーネントが再レンダリングされます。"
  },
  {
    "ID": 44,
    "category": "react",
    "question": "Reactでの条件付きのレンダリングにはどの演算子が使用されることが多いでしょう？",
    "choices1": "&&演算子",
    "choices2": "||演算子",
    "choices3": "?:演算子",
    "choices4": "!演算子",
    "answer": "&&演算子",
    "explanation": "Reactでは、条件に基づいて要素をレンダリングするために\"&&\"演算子が使用されます。 条件式が真の場合、右側の要素が返されます。条件式が偽の場合、何も返されず、要素はレンダリングされません。"
  },
  {
    "ID": 45,
    "category": "typescript",
    "question": "TypeScriptの型指定を使用するときの書き方はどれでしょう？",
    "choices1": "const variable: number = 10;",
    "choices2": "let variable = 10: number;",
    "choices3": "const { variable } = 10;",
    "choices4": "const variable = 10;",
    "answer": "const variable: number = 10;",
    "explanation": "TypeScriptでは、変数の型を宣言するために変数名の後にコロンを使用して型アノテーションを行います。 その後、変数に対して値を代入します。選択肢cの書式が正しい型アノテーションの方法です。"
  },
  {
    "ID": 46,
    "category": "react",
    "question": "Reactの仮想DOMは何を行うためのものと言われているでしょう？",
    "choices1": "コンポーネントの再描画を最適化するため",
    "choices2": "コンポーネントの状態を管理するため",
    "choices3": "イベントハンドリングを容易にするため",
    "choices4": "コンポーネントのライフサイクルを管理するため",
    "answer": "コンポーネントの再描画を最適化するため",
    "explanation": "仮想DOMはDOMの仮想的な表現です。 Reactは仮想DOMを使用してコンポーネントの状態の変更を追跡し、必要な場合にのみ実際のDOMを更新することで、パフォーマンスを向上させます。"
  },
  {
    "ID": 47,
    "category": "react",
    "question": "Reactのコンテキスト(Context)は何のために使用されるでしょう？",
    "choices1": "コンポーネント間でデータを共有するため",
    "choices2": "コンポーネントの状態を管理するため",
    "choices3": "コンポーネントのライフサイクルを管理するため",
    "choices4": "コンポーネントの表示を制御するため",
    "answer": "コンポーネント間でデータを共有するため",
    "explanation": "コンテキスト(Context)は、コンポーネントツリー全体で共有されるデータを提供するために使用されます。 コンテキストを使用することで、親コンポーネントから子コンポーネントまでデータを効率的に渡すことができます。"
  },
  {
    "ID": 48,
    "category": "html",
    "question": "HTMLで<div>タグと<span>タグの主な違いは何でしょう？",
    "choices1": "divタグはスタイルシートで指定できる属性が多く、spanタグは少ないです。",
    "choices2": "divタグは検索エンジンに認識されやすく、spanタグは認識されにくいです。",
    "choices3": "divタグはSEOに効果的であり、spanタグはSEOに効果がありません。",
    "choices4": "divタグはブロック要素で、spanタグはインライン要素です。",
    "answer": "divタグはブロック要素で、spanタグはインライン要素です。",
    "explanation": "divタグとspanタグは、どちらもHTMLのタグですが、主な違いはブロック要素とインライン要素である点です。 ブロック要素は行単位で表示される要素であり、インライン要素はテキストとテキストの間に表示される要素です。"
  },
  {
    "ID": 49,
    "category": "html",
    "question": "HTMLの<table>タグで表を作成するには、主にどのようにすればよいでしょう？",
    "choices1": "<table>タグで囲み、<th>タグでヘッダーセルを作成します。",
    "choices2": "<table>タグで囲み、<tr>タグと<td>タグでセルを作成して<td>タグの中にテキストを書きます。",
    "choices3": "<table>タグで囲んだ中にそのまま表の値をすべて書き出します。",
    "choices4": "<table>タグで囲み、<a>タグと<div>タグでセルを作成して<div>タグの中にテキストを書きます。",
    "answer": "<table>タグで囲み、<tr>タグと<td>タグでセルを作成して<td>タグの中にテキストを書きます。",
    "explanation": "<table>タグは表を表すタグで、<tr>タグは行を表すタグで、<td>タグはセルを表すタグです。 表を作成するには、<table>タグで囲み<tr>タグと<td>タグでセルを作成します。"
  },
  {
    "ID": 50,
    "category": "html",
    "question": "HTMLでテキストを中央寄せで表示する書き方として正しいのはどれでしょう？",
    "choices1": "<div>タグを使用すれば必ずテキストが中央寄せになります。",
    "choices2": "<div style=\"text-align: center;\">を使用します。",
    "choices3": "<span style=\"text-align: center;\">タグを使用します。",
    "choices4": "<a style=\"text-align: center;\">タグを使用します。",
    "answer": "<div style=\"text-align: center;\">を使用します。",
    "explanation": "text-alignは<div>タグや<p>タグなどブロック要素のみで使用可能で、コンテンツを囲んでテキストを中央寄せにすることができます。 style属性は、CSSスタイルを指定します。"
  },
  {
    "ID": 51,
    "category": "html",
    "question": "HTMLでリストを作成するには、主にどのようにすればよいでしょう？",
    "choices1": "<ul>タグと<li>タグを使用します。",
    "choices2": "<div>タグと<a>タグを使用します。",
    "choices3": "<picture>タグと<img>タグを使用します。",
    "choices4": "<select>タグと<option>タグを使用します。",
    "answer": "<ul>タグと<li>タグを使用します。",
    "explanation": "<ul>タグは無序リストを表すタグで、<li>タグはリスト項目を表すタグです。 リストを作成するには、<ul>タグで囲み<li>タグでリスト項目を追加します。"
  },
  {
    "ID": 52,
    "category": "css",
    "question": "div {\n  color: red;\n}\n\nこのCSSの記述は、div要素の文字色を赤にします。\nしかしdiv要素にテキストがない場合はどのようになるでしょう？",
    "choices1": "div要素にテキストがない場合、このCSSは何もしません。",
    "choices2": "div要素にテキストがない場合、div要素の背景色が赤になります。",
    "choices3": "div要素にテキストがない場合、div要素の影が赤になります。",
    "choices4": "div要素にテキストがない場合、div要素の枠線が赤になります。",
    "answer": "div要素にテキストがない場合、このCSSは何もしません。",
    "explanation": "colorプロパティは、テキストの色を指定します。 div要素にテキストがない場合はこのプロパティは適用されないためCSSは何もしません。"
  },
  {
    "ID": 53,
    "category": "css",
    "question": "次のCSSコードはどのような意味になるでしょう？\n\ndiv {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}",
    "choices1": "divの子要素は等間隔に配置されます。",
    "choices2": "divの子要素は縦に中央に配置され、横にも中央に配置されます。",
    "choices3": "divの子要素は縦に中央に配置され、横には左寄せに配置されます。",
    "choices4": "divの子要素は等間隔に配置され、横には右寄せに配置されます。",
    "answer": "divの子要素は縦に中央に配置され、横にも中央に配置されます。",
    "explanation": "display: flex;はフレックスボックスとして扱います。 justify-content: center;は、フレックスボックスのアイテムを水平方向に中央に配置します。 またalign-items: center;は、フレックスボックスのアイテムを垂直方向に中央に配置します。"
  },
  {
    "ID": 54,
    "category": "css",
    "question": "次のCSSコードは、どのような意味になるでしょう？\n\ndiv {\n  border: 1px solid red;\n  border-radius: 10px;\n}",
    "choices1": "div要素の枠に赤い直線が引かれ、その線の角が直角になります。",
    "choices2": "div要素の枠に赤い直線が引かれ、その線の角が丸くなります。",
    "choices3": "div要素の枠に赤い波線が引かれ、その線の角が丸くなります。",
    "choices4": "div要素の枠に赤い破線が引かれ、その線の角が丸くなります。",
    "answer": "div要素の枠に赤い直線が引かれ、その線の角が丸くなります。",
    "explanation": "border: 1px solid red;は、div要素の周りに赤い直線を引く設定です。 またborder-radius: 10px;は、div要素の角の丸さを設定します。"
  },
  {
    "ID": 55,
    "category": "その他",
    "question": "wwwはウェブサイトのURLでよく見られる接頭辞ですが、この接頭辞は何を表しているでしょうか？",
    "choices1": "Website（ウェブサイト）",
    "choices2": "Webpage（ウェブページ）",
    "choices3": "Wicked Wild West（ワイルドウエスト）",
    "choices4": "World Wide Web（ワールドワイドウェブ）",
    "answer": "World Wide Web（ワールドワイドウェブ）",
    "explanation": "wwwはWorld Wide Web（ワールドワイドウェブ）を表しています。 ウェブサイトのURLにwwwが使われるのは、そのサイトがWorld Wide Web上でアクセス可能であることを示す慣習です。"
  },
  {
    "ID": 56,
    "category": "css",
    "question": "CSSのmarginとpaddingの違いは次のうちどれでしょう？",
    "choices1": "marginは要素の内側の余白を指定し、paddingは要素の外側の余白を指定する。",
    "choices2": "marginは要素の周囲の余白を指定し、paddingは要素内の余白を指定する。",
    "choices3": "marginは要素の位置を指定し、paddingは要素のサイズを指定する。",
    "choices4": "marginとpaddingは完全に同じ機能であり、どちらを使っても同じ結果が得られる。",
    "answer": "marginは要素の周囲の余白を指定し、paddingは要素内の余白を指定する。",
    "explanation": "marginプロパティは、要素とその周囲との間の余白（スペース）を設定します。 一方paddingプロパティは、要素の内容と境界との間の余白（スペース）を設定します。"
  },
  {
    "ID": 57,
    "category": "css",
    "question": "CSSのpositionプロパティの値で、staticとabsoluteの違いは次のうちどれでしょう？",
    "choices1": "staticは要素を通常のレイアウトに従って配置し、absoluteは要素を親要素に対して相対的な位置に配置する。",
    "choices2": "staticは要素を親要素に対して相対的な位置に配置し、absoluteは要素を通常のレイアウトに従って配置する。",
    "choices3": "staticは要素を絶対的な位置に配置し、absoluteは要素を通常のレイアウトに従って配置する。",
    "choices4": "staticとabsoluteは同じ意味であり、両方とも要素を通常のレイアウトに従って配置する。",
    "answer": "staticは要素を通常のレイアウトに従って配置し、absoluteは要素を親要素に対して相対的な位置に配置する。",
    "explanation": "position: static;は要素を通常のレイアウトに従って配置しますが、position: absolute;は要素を親要素から相対的に移動させることができます。 absoluteを使用した場合、top、right、bottom、leftプロパティを使用して要素を移動させることができます。"
  },
  {
    "ID": 58,
    "category": "css",
    "question": "CSSのbox-shadowプロパティを使用して要素に影を付けることができますが、次のうちどの値が影の位置を指定しているでしょう？",
    "choices1": "最初の値: 縦方向のオフセット、 2番目の値: 横方向のオフセット",
    "choices2": "最初の値: 横方向のオフセット、 2番目の値: 縦方向のオフセット",
    "choices3": "最初の値: 影のぼかし半径、2番目の値: 横方向のオフセット",
    "choices4": "最初の値: 影の色、2番目の値: 横方向のオフセット",
    "answer": "最初の値: 横方向のオフセット、 2番目の値: 縦方向のオフセット",
    "explanation": "box-shadowプロパティは、要素に影を付けるために使用されます。 このプロパティの値は「横方向のオフセット」「縦方向のオフセット」の順に指定します。 影の位置を調整するために、横方向のオフセットと縦方向のオフセットを適切に設定する必要があります。"
  },
  {
    "ID": 59,
    "category": "html",
    "question": "HTMLのbrタグは何を行うために使用されることが多いでしょう？",
    "choices1": "水平線を描画する",
    "choices2": "箇条書きリストを作成する",
    "choices3": "画像を表示する",
    "choices4": "改行を挿入する",
    "answer": "改行を挿入する",
    "explanation": "brタグは、テキストやコンテンツの中で改行を挿入するために使用されます。"
  },
  {
    "ID": 60,
    "category": "js",
    "question": "JavaScriptの「==」と「===」の違いは何でしょう？",
    "choices1": "「==」と「===」は同じ意味で、使い分けに違いはない",
    "choices2": "「==」は数値同士の比較に使用し、「===」は文字列同士の比較に使用する",
    "choices3": "「==」は値の等価性を判定するが、型の比較は行わない。「===」は値と型の等価性を判定する",
    "choices4": "「==」は真偽値の比較に使用し、「===」はオブジェクト同士の比較に使用する",
    "answer": "「==」は値の等価性を判定するが、型の比較は行わない。「===」は値と型の等価性を判定する",
    "explanation": "「==」は値の等価性を判定する際に、必要に応じて型の変換を行います。「 ===」は値と型の両方が完全に一致している場合にのみ等価と判定します。 例えば、\"1\" == 1 は真（true）となりますが、\"1\" === 1 は偽（false）となります。"
  },
  {
    "ID": 61,
    "category": "js",
    "question": "JavaScriptのsetTimeout関数とsetInterval関数の大きな違いは何でしょう？",
    "choices1": "setTimeoutは一度だけ指定したコードを遅延実行するが、setIntervalは指定したコードを繰り返し実行する",
    "choices2": "setTimeoutは非同期処理を行い、setIntervalは同期処理を行う",
    "choices3": "どちらも同じ機能を持つタイマー関数であり、違いはない",
    "choices4": "setTimeoutはDBにアクセスできるが、setIntervalはアクセスできない",
    "answer": "setTimeoutは一度だけ指定したコードを遅延実行するが、setIntervalは指定したコードを繰り返し実行する",
    "explanation": "setTimeoutは、指定した時間の経過後に一度だけ指定したコードを実行します。 一方setIntervalは指定した時間間隔でコードを繰り返し実行します。"
  },
  {
    "ID": 62,
    "category": "その他",
    "question": "インターネットにおいてURLとURIの違いは何でしょう？",
    "choices1": "URLはウェブページのアドレスを示し、URIはウェブページのリンクを示す。",
    "choices2": "URLはウェブページのリンクを示し、URIはウェブページのアドレスを示す。",
    "choices3": "URLとURIは同じ意味で使用される。",
    "choices4": "URLはウェブページの場所を示し、URIはウェブページの識別子を示す。",
    "answer": "URLはウェブページの場所を示し、URIはウェブページの識別子を示す。",
    "explanation": "URLは特定のウェブページやファイルなど、リソースがインターネット上でどこにあるかを示すアドレスです。 URLは一般的に「http://」や「https://」などのスキーム（プロトコル）と、ドメイン名（例: www.example.com）やIPアドレス、リソースのパスやクエリ文字列を含むことがあります。 URIは特定のリソースを識別する一意の文字列であり、URLはURIの一部です。"
  },
  {
    "ID": 63,
    "category": "react",
    "question": "Reactでコンポーネントを作成する際、必ず含める必要がある要素は何でしょう？",
    "choices1": "<div>要素",
    "choices2": "<component>要素",
    "choices3": "<react>要素",
    "choices4": "<jsx>要素",
    "answer": "<div>要素",
    "explanation": "Reactでコンポーネントを作成する際、コンポーネント内に複数の要素を返す場合、必ず1つのルート要素にそれらを含める必要があります。 通常は<div>要素を使って複数の要素を囲みます。"
  },
  {
    "ID": 64,
    "category": "typescript",
    "question": "TypeScriptの特徴に関するもので正しいものはどれでしょう？",
    "choices1": "TypeScriptはサーバーサイドの言語である。",
    "choices2": "TypeScriptはブラウザ上で直接実行される。",
    "choices3": "TypeScriptはJavaScriptとの互換性がない。",
    "choices4": "TypeScriptは静的型付け言語である。",
    "answer": "TypeScriptは静的型付け言語である。",
    "explanation": "TypeScriptはJavaScriptの欠点を補うために開発された言語であり、静的型付けやクラスベースのオブジェクト指向など、JavaScriptの機能を拡張してより堅牢なアプリケーションの開発を支援します。"
  },
  {
    "ID": 65,
    "category": "react",
    "question": "React Hooksに関するもので正しいものはどれでしょう？",
    "choices1": "useStateフックは、状態をクラスコンポーネントと共有するために使用される。",
    "choices2": "React HooksはReact 16.8で導入された。",
    "choices3": "useEffectフックは、コンポーネントがアンマウントされる時に実行される。",
    "choices4": "useStateフックは、非同期操作を行うために使用される。",
    "answer": "React HooksはReact 16.8で導入された。",
    "explanation": "React HooksはReactのバージョン16.8で導入されました。 これにより、関数コンポーネントで状態管理やライフサイクルメソッドなど、クラスコンポーネントに依存していた機能を利用できるようになりました。"
  },
  {
    "ID": 66,
    "category": "react",
    "question": "Reduxの役割として正しいものはどれでしょう？",
    "choices1": "ユーザーの入力を処理するためのライブラリ",
    "choices2": "コンポーネント間の状態管理を容易にするためのライブラリ",
    "choices3": "グローバルなスタイルを管理するためのライブラリ",
    "choices4": "サーバーからデータを取得するためのライブラリ",
    "answer": "コンポーネント間の状態管理を容易にするためのライブラリ",
    "explanation": "Reduxの中心的な概念は、アプリケーションの状態を1つのストア（state）に格納し、アプリケーション内のコンポーネントが必要な状態をストアから取得することです。 コンポーネントは直接状態を変更するのではなく、アクション（Actions）と呼ばれるイベントをディスパッチすることで状態の変更を実行します。"
  },
  {
    "ID": 67,
    "category": "その他",
    "question": "Webページのレスポンシブデザインにおいて、「ブレークポイント」とは何を意味する言葉でしょう？",
    "choices1": "デザインの要素を固定するためのデザインテクニック",
    "choices2": "ページ内のエラーやバグを修正するための特定のタイミング",
    "choices3": "画像やコンテンツの読み込みを待つための時間差",
    "choices4": "特定のデバイスの画面サイズに合わせて、コンテンツの配置を調整するための基準",
    "answer": "特定のデバイスの画面サイズに合わせて、コンテンツの配置を調整するための基準",
    "explanation": "ブレークポイントはレスポンシブデザインにおいて異なるデバイスの画面サイズに合わせてコンテンツの配置やデザインを変更するための基準を指します。 これにより、スマートフォン、タブレット、デスクトップなどの異なるデバイスで、最適な表示を提供することが可能となります。"
  },
  {
    "ID": 68,
    "category": "その他",
    "question": "Web上でユーザーが行った特定のアクションを追跡し、データを収集するための仕組みは何と呼ばれるでしょう？",
    "choices1": "サイトマップ",
    "choices2": "ユーザビリティテスト",
    "choices3": "タグマネージャー",
    "choices4": "アクセス解析",
    "answer": "アクセス解析",
    "explanation": "アクセス解析はウェブページ上でのユーザーの行動やアクションを追跡しデータを収集するための仕組みです。 これによりウェブサイトのトラフィック、ユーザーの動き、ページのコンバージョン率などの重要な情報を把握し、改善のためのデータ分析に利用することができます。"
  },
  {
    "ID": 69,
    "category": "html",
    "question": "HTMLの「meta」要素で指定される「viewport」とは何を意味するものでしょう？",
    "choices1": "ウェブページのタイトル",
    "choices2": "ページの言語コード",
    "choices3": "ページのキャラクターセット",
    "choices4": "モバイルデバイスのビューポート（表示領域）",
    "answer": "モバイルデバイスのビューポート（表示領域）",
    "explanation": "「meta」要素に「viewport」を指定することで、レスポンシブデザインにおいてモバイルデバイスのビューポートを制御します。 ビューポートの設定により、ページがモバイルデバイスの画面サイズに適切にフィットし拡大縮小を制御することができます。"
  },
  {
    "ID": 70,
    "category": "css",
    "question": "CSSの\"font-weight\"プロパティの値\"bold\"は主に何をするものでしょう？",
    "choices1": "テキストの文字間隔を太くする",
    "choices2": "テキストの下線を太くする",
    "choices3": "テキストの太字を指定する",
    "choices4": "テキストの斜体を指定する",
    "answer": "テキストの太字を指定する",
    "explanation": "font-weightプロパティのboldは、テキストを太字（太い）のスタイルで表示するために使用されます。 他にもfont-weightプロパティにはさまざまな値があり、例えば normalや数値の相対的な重みを指定することもできます。"
  },
  {
    "ID": 71,
    "category": "typescript",
    "question": "TypeScriptをReactで使う際の正しい記述はどれでしょう？",
    "choices1": "TypeScriptをReactで使う際の正しい記述はどれでしょう？",
    "choices2": "TypeScriptを使う場合、拡張子を.tsxに変更する必要がある。",
    "choices3": "ReactはJavaScriptのみをサポートしており、TypeScriptは使用できない。",
    "choices4": "TypeScriptを使う場合、拡張子を.jsxに変更する必要がある。",
    "answer": "TypeScriptを使う場合、拡張子を.tsxに変更する必要がある。",
    "explanation": "Reactコンポーネントのファイルの拡張子は「.jsx」でしたが、TypeScriptを使用する場合は「.tsx」に変更する必要があります。"
  },
  {
    "ID": 72,
    "category": "react",
    "question": "Reactのver16.8以降で導入された、副作用を扱うためのフックは次のうちどれでしょう？",
    "choices1": "useEffect",
    "choices2": "useState",
    "choices3": "useLifecycle",
    "choices4": "useEffectHook",
    "answer": "useEffect",
    "explanation": "useEffectフックはReactコンポーネントがマウント、アンマウント、あるいは更新される際に副作用を実行するために使用されます。 副作用には、データの取得やDOMの操作、サブスクリプションの設定などが含まれます。"
  },
  {
    "ID": 73,
    "category": "react",
    "question": "Reactのver16.8以降で導入された、複雑な状態管理やアクションの処理に使用されるフックはどれでしょう？",
    "choices1": "useReducer",
    "choices2": "useState",
    "choices3": "useEffect",
    "choices4": "useContext",
    "answer": "useReducer",
    "explanation": "useReducerフックは、複雑な状態管理やアクションの処理を行うために使用されます。 useReducerはReduxのような状態管理ライブラリと似たような機能を提供しますが、より軽量で単純な状態管理に適しています。"
  },
  {
    "ID": 74,
    "category": "js",
    "question": "JavaScriptのES2016以降に追加された、非同期処理を行うための構文はどれでしょう？",
    "choices1": "async/await",
    "choices2": "let命令",
    "choices3": "for...ofループ",
    "choices4": "アロー関数",
    "answer": "async/await",
    "explanation": "async/await: 非同期処理を扱うための新しい構文で、非同期関数をより簡潔に書くことができます。 async関数内でawaitキーワードを使用すると、非同期処理が完了するまでその行で待機します。 これによりコールバック関数やPromiseチェーンよりも読みやすく、理解しやすいコードを書くことができます。"
  },
  {
    "ID": 75,
    "category": "js",
    "question": "JavaScriptの変数名として使用できない書き方は次のうちどれでしょう？",
    "choices1": "myVar = 100;",
    "choices2": "_variable = 100;",
    "choices3": "123Var = 100;",
    "choices4": "price_var = 100;",
    "answer": "123Var = 100;",
    "explanation": "JavaScriptの変数名は英字またはアンダースコア（_）で始まる必要があります。 数字で始まることはできません。"
  },
  {
    "ID": 76,
    "category": "js",
    "question": "JavaScriptの配列内の要素数を取得するために使用するプロパティは次のうちどれでしょう？",
    "choices1": ".length",
    "choices2": ".count",
    "choices3": ".size",
    "choices4": ".index",
    "answer": ".length",
    "explanation": "JavaScriptの配列は、要素数を取得するために\".length\"プロパティを使用します。 このプロパティは配列内の要素数を示します。"
  },
  {
    "ID": 77,
    "category": "js",
    "question": "JavaScriptで配列の要素を順番に処理するために使用されるメソッドは次のうちどれでしょう？",
    "choices1": "iterate()",
    "choices2": "new()",
    "choices3": "forEach()",
    "choices4": "traverse()",
    "answer": "forEach()",
    "explanation": "forEach()メソッドは、配列の各要素に対して指定された関数を順に実行します。 これにより繰り返し処理を行うことができます。"
  },
  {
    "ID": 78,
    "category": "html",
    "question": "HTMLの<head>タグの中では使わないタグは次のどれでしょう？",
    "choices1": "<title>タグ",
    "choices2": "<link>タグ",
    "choices3": "<script>タグ",
    "choices4": "<body>タグ",
    "answer": "<body>タグ",
    "explanation": "titleタグ：ページのタイトルを記述します。 linkタグ：ページのスタイルシートをリンクします。 scriptタグ：ページのスクリプトを記述します。"
  },
  {
    "ID": 79,
    "category": "js",
    "question": "オブジェクト指向プログラミングで、オブジェクトの中にあるデータは何と呼ばれることが多いでしょう？",
    "choices1": "オブジェクティブ",
    "choices2": "プロトタイプ",
    "choices3": "クラス",
    "choices4": "プロパティ",
    "answer": "プロパティ",
    "explanation": "オブジェクトが保持するデータはプロパティと呼ばれます。 それに対してオブジェクトが実行する操作はメソッドと呼ばれます。"
  },
  {
    "ID": 80,
    "category": "js",
    "question": "JavaScriptでクラスからインスタンス化するために使用されるキーワードは次のうちどれでしょう？",
    "choices1": "create",
    "choices2": "new",
    "choices3": "object",
    "choices4": "make",
    "answer": "new",
    "explanation": "クラスからインスタンスを生成するためにはnewキーワードを使用します。 例えばconst date = new Date();などの書き方です。"
  },
  {
    "ID": 81,
    "category": "js",
    "question": "JavaScriptでオブジェクトのプロパティにアクセスするために使用される演算子は次のうちどれでしょう？",
    "choices1": ". (ドット) 演算子",
    "choices2": ": (コロン) 演算子",
    "choices3": "-> (矢印) 演算子",
    "choices4": ", (カンマ) 演算子",
    "answer": ". (ドット) 演算子",
    "explanation": "JavaScriptでオブジェクトのプロパティにアクセスするためにはドット演算子を使用します。 例えば、obj.propertyのように書くことで、objオブジェクトのpropertyプロパティにアクセスできます。"
  },
  {
    "ID": 82,
    "category": "js",
    "question": "JavaScriptにおいて、配列に新しい要素を追加するために使用されるメソッドは次のうちどれでしょう？",
    "choices1": "push()",
    "choices2": "matchMedia()",
    "choices3": "shift()",
    "choices4": "fetch()",
    "answer": "push()",
    "explanation": "正解です！ JavaScriptのpush()メソッドは配列の末尾に要素を追加します。 これにより配列の長さが増えます。"
  },
  {
    "ID": 83,
    "category": "js",
    "question": "JavaScriptで関数の引数として渡された変数は、その関数のなかでどのように利用されるでしょう？",
    "choices1": "関数に渡された引数は関数内で自動的にグローバル変数になる",
    "choices2": "関数に渡された引数は関数内でのみローカル変数として利用できる",
    "choices3": "関数に渡された引数は関数内でのみローカル変数として利用できるが、値を変更することはできない",
    "choices4": "関数に渡された引数は関数内で自動的に定数として扱われる",
    "answer": "関数に渡された引数は関数内でのみローカル変数として利用できる",
    "explanation": "関数の引数は、関数内でローカル変数として扱われます。 また引数の値を関数内で変更することも可能です。"
  },
  {
    "ID": 84,
    "category": "js",
    "question": "JavaScriptで関数のなかで使用していた値を、他の場所でも使用できるようにするためには何のキーワードは必要でしょう？",
    "choices1": "expose",
    "choices2": "import",
    "choices3": "this",
    "choices4": "return",
    "answer": "return",
    "explanation": "関数内から関数外に返すことはreturn文を使用して行われます。 関数内で計算された結果や値を他の場所でも使用できるようになります。"
  },
  {
    "ID": 85,
    "category": "js",
    "question": "JavaScriptの条件分岐に関する以下の記述のうち、正しいものはどれでしょう？",
    "choices1": "if文は、必ず else ブロックを持つ必要があります。",
    "choices2": "switch文では、各 case 内でbreak を使用しない限り次の case も実行されます。",
    "choices3": "三項演算子は、複雑な条件分岐のために使用することが多いです。",
    "choices4": "if文とswitch文は、同じ方法で使用されてどちらでも代替可能です。",
    "answer": "switch文では、各 case 内でbreak を使用しない限り次の case も実行されます。",
    "explanation": "switch文ではbreakがない以上は次のcaseにも移っていきます。"
  },
  {
    "ID": 86,
    "category": "css",
    "question": "CSSのプロパティにおいて、テキストの文字間隔を指定するものはどれでしょう？",
    "choices1": "line-height",
    "choices2": "letter-spacing",
    "choices3": "word-spacing",
    "choices4": "font-size",
    "answer": "letter-spacing",
    "explanation": "letter-spacingプロパティは、テキストの文字間隔を指定します。"
  },
  {
    "ID": 87,
    "category": "その他",
    "question": "プログラミングにおけるパス（Path）とはどういう意味で使われることが多いでしょう？",
    "choices1": "プログラム内での条件分岐を示すもの。",
    "choices2": "ファイルやディレクトリの位置を示す文字列。",
    "choices3": "プログラムの実行速度を制御するための指示。",
    "choices4": "プログラムのエラーメッセージを格納するデータ構造。",
    "answer": "ファイルやディレクトリの位置を示す文字列。",
    "explanation": "パス（Path）は、ファイルやディレクトリなどのリソースの位置を示すための文字列です。 ファイルシステム内での階層的な位置を示し、リソースへのアクセス方法を定義します。"
  },
  {
    "ID": 88,
    "category": "その他",
    "question": "プログラミングにおける\"localhost\"は何を指すものでしょう？",
    "choices1": "インターネット上の特定のウェブサイトのドメイン名。",
    "choices2": "コンピュータ上で動作しているウェブサーバーのアドレス。",
    "choices3": "オンラインゲームのサーバーへのアクセスポイント。",
    "choices4": "インターネット接続の速度を測定するツール。",
    "answer": "コンピュータ上で動作しているウェブサーバーのアドレス。",
    "explanation": "\"localhost\"は、自分自身のコンピュータ内で動作しているウェブサーバーや他のサービスにアクセスするための特殊なホスト名です。 これを使用することで、自分のコンピュータ上に構築されたウェブサイトやアプリケーションにブラウザからアクセスすることができます。"
  },
  {
    "ID": 89,
    "category": "その他",
    "question": "プログラミングにおいて、クライアントとサーバー間の通信に最もよく使用されるプロトコルは次のうちどれでしょう？",
    "choices1": "HTML",
    "choices2": "CSS",
    "choices3": "HTTP",
    "choices4": "JavaScript",
    "answer": "HTTP",
    "explanation": "HTTP（Hypertext Transfer Protocol）は、クライアントとサーバー間でハイパーテキストやマルチメディアなどのリソースを転送するためのプロトコルです。ウェブページの要求と応答は、通常HTTPプロトコルを使用して行われます。"
  },
  {
    "ID": 90,
    "category": "その他",
    "question": "Web制作などで使われるレンタルサーバーとはどういうものでしょう？",
    "choices1": "レンタルサーバーは、プログラムやウェブサイトをホストするためのリモートサーバーを借りるサービスである。",
    "choices2": "レンタルサーバーはプログラムのコーディングを自動化するためのプラットフォームである。",
    "choices3": "レンタルサーバーはオフラインでプログラムを開発するためのツールである。",
    "choices4": "レンタルサーバーは個人や会社がすべて占有サーバーである。",
    "answer": "レンタルサーバーは、プログラムやウェブサイトをホストするためのリモートサーバーを借りるサービスである。",
    "explanation": "プログラムやウェブサイトのファイルやデータをリモートサーバーに配置して、インターネット経由でアクセス可能にするためのサービスです。"
  },
  {
    "ID": 91,
    "category": "js",
    "question": "ログラミングにおいて、動的型付け言語と静的型付け言語の違いは何でしょう？",
    "choices1": "変数のスコープが異なる",
    "choices2": "プログラムの実行速度の違い",
    "choices3": "型の指定の有無",
    "choices4": "サイトかアプリかの違い",
    "answer": "型の指定の有無",
    "explanation": "動的型付け言語は、変数のデータ型を宣言する必要がなく、実行時に型が自動的に判断されます。一方、静的型付け言語は、変数のデータ型を事前に宣言する必要があり、コードのコンパイル時に型チェックが行われます。"
  },
  {
    "ID": 92,
    "category": "js",
    "question": "プログラミングにおける「データ型」とは何を指すものでしょう？",
    "choices1": "コードのブロックを区別するためのラベル",
    "choices2": "変数に対して操作を行うための命令",
    "choices3": "データの性質",
    "choices4": "データの一時的な保管場所",
    "answer": "データの性質",
    "explanation": "データ型は、プログラミング言語において変数や値の性質を示すものです。異なるデータ型は異なる種類のデータを表し、それに対して適切な操作や計算を行うために使用されます。例えば、整数、浮動小数点数、文字列などは異なるデータ型として扱われます。"
  },
  {
    "ID": 93,
    "category": "js",
    "question": "プログラミングにおいて、「int」「float」「string」といった用語はどのようなものに関連しているでしょう？",
    "choices1": "関数名",
    "choices2": "デザインパターンの名前",
    "choices3": "データ型",
    "choices4": "特に意味はない",
    "answer": "データ型",
    "explanation": "「int」は整数型、「float」は浮動小数点数型、そして「string」は文字列型を示します。プログラミング言語によって用語は異なることがありますが、これらは一般的なデータ型の例です。"
  },
  {
    "ID": 94,
    "category": "css",
    "question": "CSS変数は何を可能にするでしょう？",
    "choices1": "HTML要素の非表示を設定する",
    "choices2": "色やフォントなどのスタイルプロパティを一元管理する",
    "choices3": "JavaScriptコードをCSSファイル内で実行する",
    "choices4": "画像をウェブページに挿入する",
    "answer": "色やフォントなどのスタイルプロパティを一元管理する",
    "explanation": "CSS変数はスタイルプロパティの値を一元管理し、コードの保守性を向上させるために使用されます。変数を定義し、それを再利用することで、同じスタイルを複数の場所で簡単に変更できます。"
  },
  {
    "ID": 95,
    "category": "css",
    "question": "CSSのflexボックスは何のために使用されることが多いでしょう？",
    "choices1": "テキストのスタイリングに使用される",
    "choices2": "ウェブページの背景を設定するために使用される",
    "choices3": "ページレイアウトとアイテムの配置を管理するために使用される",
    "choices4": "アニメーション効果を適用するために使用される",
    "answer": "ページレイアウトとアイテムの配置を管理するために使用される",
    "explanation": "CSSのflexボックスは、ページレイアウトを管理しアイテム（要素）の配置を制御するために使用されます。これにより要素を柔軟に並べ替え、配置し、スペースを効率的に利用できます。"
  },
  {
    "ID": 96,
    "category": "css",
    "question": "CSSのボックスモデルはがウェブページ上で最も関係しているどれでしょう？",
    "choices1": "テキストフォントの設定",
    "choices2": "レイアウトと要素のサイズ",
    "choices3": "ページの背景色",
    "choices4": "ハイパーリンクのスタイル",
    "answer": "レイアウトと要素のサイズ",
    "explanation": "CSSのボックスモデルは、要素のレイアウトとサイズを制御するために使用されます。これには要素のコンテンツ、ボーダー、余白、およびパディングが含まれます。"
  },
  {
    "ID": 97,
    "category": "js",
    "question": "JavaScriptのECMAScriptは何の略称でしょう？",
    "choices1": "ECMA Scripted Language",
    "choices2": "Electronic Computer Manufacturing Association Script",
    "choices3": "Electronic Computer Manufacturing Association Script",
    "choices4": "Ecumenical Community of Modern Art Script",
    "answer": "Electronic Computer Manufacturing Association Script",
    "explanation": "ECMAScriptは、1997年にEuropean Computer Manufacturer's Association（ECMA）によって制定されました。JavaScriptはECMAScriptの実装の一つであり、多くのブラウザで使用されています。"
  },
  {
    "ID": 98,
    "category": "js",
    "question": "JavaScriptで関数宣言と関数式の違いは何でしょう？",
    "choices1": "関数宣言はグローバルスコープで宣言され、関数式はローカルスコープで宣言される。",
    "choices2": "関数宣言は実行前に評価され、関数式は実行時に評価される。",
    "choices3": "関数宣言はフック関数を作成し、関数式は通常の関数を作成する。",
    "choices4": "関数宣言はセミコロンで終了し、関数式は終了セミコロンを必要としない。",
    "answer": "関数宣言は実行前に評価され、関数式は実行時に評価される。",
    "explanation": "関数宣言はスクリプトの実行前に評価され、そのため関数をどこでも呼び出すことができます。関数式は実行フローに依存して評価されるため、宣言前に呼び出すことはできません。"
  },
  {
    "ID": 99,
    "category": "js",
    "question": "JavaScriptで関数内で使用される「return」キーワードは何を行うことが一般的でしょう？",
    "choices1": "関数の引数を設定します。",
    "choices2": "関数から値を返します。",
    "choices3": "関数の実行を一時停止します。",
    "choices4": "関数を非同期に実行します。",
    "answer": "関数から値を返します。",
    "explanation": "「return」キーワードは関数内から値を返し、関数を呼び出し元に戻します。これにより関数から計算された結果やデータを使用できます。"
  },
  {
    "ID": 100,
    "category": "js",
    "question": "JavaScriptで関数の引数として渡されるデフォルト値を設定する機能は何でしょう？",
    "choices1": "Spread演算子",
    "choices2": "オプション引数",
    "choices3": "デフォルト引数",
    "choices4": "アロー関数",
    "answer": "デフォルト引数",
    "explanation": "ES6以降、JavaScriptではデフォルト引数を使用して関数の引数にデフォルト値を設定することができます。これにより引数が渡されない場合やundefinedの場合にデフォルト値を使用できます。"
  },
  {
    "ID": 101,
    "category": "js",
    "question": "JavaScriptにおいてDOM APIとは何の略でしょう？",
    "choices1": "Database Object Model API",
    "choices2": "Document Object Model API",
    "choices3": "Data Object Model API",
    "choices4": "Document Order Model API",
    "answer": "Document Object Model API",
    "explanation": "DOM APIは、HTML文書の要素や構造をプログラムから操作できるようにするJavaScriptのAPIです。"
  },
  {
    "ID": 102,
    "category": "js",
    "question": "JavaScriptにおいてFetch APIは何に使われることが多いでしょう？",
    "choices1": "ユーザー入力の検証",
    "choices2": "グラフィックスの描画",
    "choices3": "ローカルストレージの管理",
    "choices4": "サーバーからデータを取得するため",
    "answer": "サーバーからデータを取得するため",
    "explanation": "Fetch APIは、ネットワークリクエストを行い、サーバーからデータを非同期で取得するためのAPIです。"
  },
  {
    "ID": 103,
    "category": "js",
    "question": "JavaScriptにおけるWebStorage APIとは、何のストレージが含まれているでしょう？",
    "choices1": "セッションストレージとローカルストレージ",
    "choices2": "ディスクストレージとメモリーストレージ",
    "choices3": "ハードディスクストレージとフラッシュストレージ",
    "choices4": "ファイルストレージとセキュリティストレージ",
    "answer": "セッションストレージとローカルストレージ",
    "explanation": "Web Storage APIには、セッションストレージとローカルストレージの2つの主要なストレージメカニズムが含まれています。これらはブラウザ内でデータを保持するために使用されます。"
  },
  {
    "ID": 104,
    "category": "js",
    "question": "JavaScriptのMathオブジェクトは何を提供してくれるでしょう？",
    "choices1": "文字列操作のメソッド",
    "choices2": "数学関数や定数",
    "choices3": "時間と日付の操作機能",
    "choices4": "データのストレージと管理",
    "answer": "数学関数や定数",
    "explanation": "Mathオブジェクトは、JavaScriptで数学的な計算を行うための関数や定数を提供します。"
  },
  {
    "ID": 105,
    "category": "js",
    "question": "JavaScriptのDateオブジェクトは何を扱うためのものでしょう？",
    "choices1": "時間と日付の情報",
    "choices2": "グラフィックスのプロパティ",
    "choices3": "Reactのprops",
    "choices4": "Webワーカー",
    "answer": "時間と日付の情報",
    "explanation": "Dateオブジェクトは、JavaScriptで日付と時間の操作を行うために使用されます。"
  },
  {
    "ID": 106,
    "category": "js",
    "question": "JavaScriptのStringオブジェクトは何を提供してくれるでしょう？",
    "choices1": "数学関数",
    "choices2": "文字列の操作メソッド",
    "choices3": "日付と時間の情報",
    "choices4": "グラフィックスの操作機能",
    "answer": "文字列の操作メソッド",
    "explanation": "Stringオブジェクトは、文字列データを操作するための多くの便利なメソッドを提供します。"
  },
  {
    "ID": 107,
    "category": "js",
    "question": "JavaScriptのArrayオブジェクトは何を扱うためのものでしょう？",
    "choices1": "日付や時間",
    "choices2": "サーバー情報",
    "choices3": "関数",
    "choices4": "値のリスト",
    "answer": "値のリスト",
    "explanation": "Arrayオブジェクトは、複数の値を格納するためのデータ構造で、値のリストを表します。"
  },
  {
    "ID": 108,
    "category": "css",
    "question": "CSSの擬似要素とは何でしょう？",
    "choices1": "HTML要素にスタイルを適用するためのプロパティ",
    "choices2": "HTML要素のIDまたはクラス名",
    "choices3": "HTML要素の特定の部分にスタイル付けできるようにするもの",
    "choices4": "HTML要素ではない仮想の要素",
    "answer": "HTML要素の特定の部分にスタイル付けできるようにするもの",
    "explanation": "CSSの擬似要素は特定のスタイリングやコンテンツを選択するための要素です。"
  },
  {
    "ID": 109,
    "category": "css",
    "question": "次のうち、CSSの擬似要素ではないものはどれでしょう？",
    "choices1": "::before",
    "choices2": "::after",
    "choices3": "::middle",
    "choices4": ":hover",
    "answer": "::middle",
    "explanation": "こちらは存在しないキーワードです。"
  },
  {
    "ID": 110,
    "category": "css",
    "question": "CSSの::beforeのcontentプロパティは通常、どのように使用されるものでしょう？",
    "choices1": "要素の前にコンテンツを挿入する",
    "choices2": "要素の背景色を設定する",
    "choices3": "要素のテキストを太字にする",
    "choices4": "要素のリンク先を指定する",
    "answer": "要素の前にコンテンツを挿入する",
    "explanation": "CSSの::beforeのcontentプロパティは、要素の前に新しいコンテンツを挿入するために使用されます。これにより、要素に追加の装飾要素を表示したり、アイコンを挿入したりすることができます。"
  },
  {
    "ID": 111,
    "category": "css",
    "question": "CSSの:nth-child()は何を対象としてスタイルを適用するものでしょう？",
    "choices1": "テキスト",
    "choices2": "特定のクラスを持つ要素",
    "choices3": "特定の位置にある要素",
    "choices4": "すべての要素",
    "answer": "特定の位置にある要素",
    "explanation": ":nth-child()は、親要素内の特定の位置にある子要素を選択するために使用されます。たとえば、:nth-child(2)は親要素内の2番目の子要素を選択し、スタイルを適用します。このセレクタは特定の要素の位置に基づいて要素を選択するのに便利です。"
  },
  {
    "ID": 112,
    "category": "その他",
    "question": "Googleフォントはどのようにウェブページで使用されるでしょう？",
    "choices1": "画像としてインポートされる",
    "choices2": "CSSプロパティ font-family で指定される",
    "choices3": "JavaScriptを使用して読み込まれる",
    "choices4": "HTMLの<google-font>要素で指定される",
    "answer": "CSSプロパティ font-family で指定される",
    "explanation": "GoogleフォントはウェブページでCSSプロパティ font-family を使用して指定されます。特定のGoogleフォントをウェブページに組み込むためには、Google Fontsから提供されるCSSリンクを読み込む必要があります。"
  },
  {
    "ID": 113,
    "category": "その他",
    "question": "Googleフォントを使用する主な利点は何でしょう？",
    "choices1": "すべてのブラウザで同じフォントが表示される",
    "choices2": "フォントが高解像度で表示され、読みやすくなる",
    "choices3": "ウェブページの読み込み時間が短縮される",
    "choices4": "ウェブページが検索エンジンで上位に表示される",
    "answer": "すべてのブラウザで同じフォントが表示される",
    "explanation": "Googleフォントはクロスプラットフォーム対応であり、ほとんどの主要なブラウザで一貫してフォントを表示することができます。これにより、ウェブサイトのデザインの一貫性を保ちながら、さまざまなデバイスとブラウザでフォントを一致させることが可能です。"
  },
  {
    "ID": 114,
    "category": "css",
    "question": "CSSの@keyframesは何を定義するために使用されるでしょう？",
    "choices1": "ページ内のリンクのスタイルを指定する",
    "choices2": "アニメーションのキーフレームを定義する",
    "choices3": "フォーム要素のデザインを設定する",
    "choices4": "フォントのスタイルを指定する",
    "answer": "アニメーションのキーフレームを定義する",
    "explanation": "@keyframesは、CSSアニメーションのキーフレームを定義するための規則です。これを使用して、アニメーションの開始と終了時点、および中間ステップで要素のスタイルを指定できます。アニメーションが進行する間、指定したスタイルの変化が滑らかに適用されます。"
  },
  {
    "ID": 115,
    "category": "css",
    "question": "CSSのanimationプロパティは何を行うために使用されるでしょう？",
    "choices1": "テキストのフォントを指定する",
    "choices2": "テキストのフォントを指定する",
    "choices3": "アニメーション効果を要素に適用する",
    "choices4": "リンクのスタイルを設定する",
    "answer": "アニメーション効果を要素に適用する",
    "explanation": "CSSのanimationプロパティは、要素にアニメーション効果を適用するために使用されます。このプロパティを使用することで、要素を移動させたり、色を変更したり、回転させたりするなど、様々なアニメーションを作成できます。"
  },
  {
    "ID": 116,
    "category": "js",
    "question": "JavaScriptにおいてdocumentオブジェクトは何を表すものでしょう？",
    "choices1": "ウェブページのURL",
    "choices2": "ウェブページの取扱説明書",
    "choices3": "ウェブページのスタイルシート",
    "choices4": "ウェブページのコンテンツ",
    "answer": "ウェブページのコンテンツ",
    "explanation": "documentオブジェクトは、現在のウェブページのコンテンツ全体を表します。これを使用して、HTML要素へのアクセスや変更、イベントのリスニングなど、ウェブページの動的な操作を行うことができます。"
  },
  {
    "ID": 117,
    "category": "js",
    "question": "JavaScriptにおいて、document.createElement(\"div\")は何を行いますか？",
    "choices1": "div要素のスタイルを変更します。",
    "choices2": "div要素のテキストコンテンツを変更します。",
    "choices3": "ページ内の既存のdiv要素を削除します。",
    "choices4": "新しいdiv要素を作成します。",
    "answer": "新しいdiv要素を作成します。",
    "explanation": "document.createElement(\"div\")は、新しいHTML要素を作成します。このメソッドは、JavaScriptで新しい要素を動的に生成し、ページに追加するのに便利です。たとえば、新しい<div>要素を作成してページに追加することができます。"
  },
  {
    "ID": 118,
    "category": "js",
    "question": "JavaScriptにおいて、document.getElementById(\"example\")は何を行いますか？",
    "choices1": "id名が\"example\"の要素を取得します。",
    "choices2": "class名が\"example\"の要素を取得します。",
    "choices3": "テキストが\"example\"の要素を取得します。",
    "choices4": "HTMLタグ名が\"example\"の要素を取得します。",
    "answer": "id名が\"example\"の要素を取得します。",
    "explanation": "document.getElementById(\"example\")は、ID属性が\"example\"である要素を取得します。このメソッドを使用することで、特定の要素にアクセスし、その要素に対して操作を行うことができます。"
  },
  {
    "ID": 119,
    "category": "css",
    "question": "CSSのanimationプロパティでアニメーションの反復回数を指定するために使用できる値はどれでしょう？",
    "choices1": "infinite",
    "choices2": "once",
    "choices3": "twice",
    "choices4": "repeat",
    "answer": "infinite",
    "explanation": "infiniteを使用することによりアニメーションが無限に繰り返されます。"
  },
  {
    "ID": 120,
    "category": "css",
    "question": "CSSの@keyframesアニメーションの中で、どのキーワードが開始と終了として使用できるものでしょう？",
    "choices1": "begin と end",
    "choices2": "from と to",
    "choices3": "start と finish",
    "choices4": "initial と final",
    "answer": "from と to",
    "explanation": "\"from\"はアニメーションの開始地点を表し、\"to\"はアニメーションの終了地点を表します。これらのキーワードを使用して、アニメーションの最初から最後までのステップを指定します。"
  },
  {
    "ID": 121,
    "category": "css",
    "question": "CSSの@keyframesアニメーションの中で、必ず指定する設定項目はどれでしょう？",
    "choices1": "animation-duration",
    "choices2": "animation-delay",
    "choices3": "animation-name",
    "choices4": "animation-timing-function",
    "answer": "animation-name",
    "explanation": "@keyframesアニメーションを定義する際、必ず\"animation-name\"プロパティを指定する必要があります。これはアニメーションの名前を指定するもので、これがないとアニメーションは適用されません。"
  },
  {
    "ID": 122,
    "category": "css",
    "question": "CSSの@keyframesで作ったアニメーションを使用するには何のプロパティを書く必要があるでしょう？",
    "choices1": "animation",
    "choices2": "transition",
    "choices3": "transform",
    "choices4": "keyframes",
    "answer": "animation",
    "explanation": "@keyframesアニメーションを要素に適用するためには、\"animation\"プロパティを使用します。このプロパティには、アニメーションの名前、期間、遅延、タイミング関数などが指定されます。"
  },
  {
    "ID": 123,
    "category": "css",
    "question": "CSSの\"transform\"プロパティと\"transition\"プロパティの違いで正しいものはどれでしょう？",
    "choices1": "\"transform\"は要素を回転させ、\"transition\"は要素の位置を変更します。",
    "choices2": "\"transform\"は要素の背景色を変更し、\"transition\"は要素の透明度を変更します。",
    "choices3": "\"transform\"は要素のスタイルを変更し、\"transition\"はアニメーションの遷移を変更します。",
    "choices4": "\"transform\"と\"transition\"は同じプロパティです。",
    "answer": "\"transform\"は要素のスタイルを変更し、\"transition\"はアニメーションの遷移を変更します。",
    "explanation": "例えば、\"transform\"を使って要素を回転させた場合、\"transition\"を使って滑らかな回転をさせることができたりします。"
  },
  {
    "ID": 124,
    "category": "css",
    "question": "CSSのtransform-originプロパティは何を制御するものでしょう？",
    "choices1": "要素の透明度を制御します。",
    "choices2": "要素の重ね合わせ順を親要素に対して相対的に調整します。",
    "choices3": "transformプロパティの基準点を制御します。",
    "choices4": "要素のフォントサイズを制御します。",
    "answer": "transformプロパティの基準点を制御します。",
    "explanation": "transform-originプロパティは、transformプロパティで要素を変形させる際の基準点を指定します。この基準点を変更することにより、要素の変形の中心を調整することができます。"
  },
  {
    "ID": 125,
    "category": "css",
    "question": "CSSでbox-sizing：border-box： は何を指定することになりますか？",
    "choices1": "ボックスの境界線を表示します。",
    "choices2": "ボックスの内側の余白とボーダーを含めた幅と高さを指定します。",
    "choices3": "ボックスの背景色を指定します。",
    "choices4": "ボックスの純粋なコンテンツのサイズを指定します。",
    "answer": "ボックスの内側の余白とボーダーを含めた幅と高さを指定します。",
    "explanation": "border-box値を持つbox-sizingプロパティは、ボックスの内側の余白（padding）とボーダー（border）を含めて、指定した幅と高さを制御します。つまり、要素のサイズを指定する際に、ボーダーや内余白を含めた全体の幅と高さを指定することができます。"
  },
  {
    "ID": 126,
    "category": "css",
    "question": "CSSのlinear-gradientとradial-gradientの違いは何でしょう？",
    "choices1": "linear-gradientは水平方向のグラデーションを作成し、radial-gradientは放射状のグラデーションを作成する。",
    "choices2": "linear-gradientは円形のグラデーションを作成し、radial-gradientは水平方向のグラデーションを作成する。",
    "choices3": "linear-gradientは背景画像を作成し、radial-gradientはテキストの装飾に使用される。",
    "choices4": "linear-gradientとradial-gradientには違いはない。",
    "answer": "linear-gradientは水平方向のグラデーションを作成し、radial-gradientは放射状のグラデーションを作成する。",
    "explanation": "linear-gradientは水平または垂直方向のグラデーションを作成し、radial-gradientは中心から放射状に広がるグラデーションを作成します。"
  },
  {
    "ID": 127,
    "category": "html",
    "question": "HTMLのinputタグで作るラジオボタンで、グループ内で複数のラジオボタンを関連付けるために使用される属性は何でしょう？",
    "choices1": "group",
    "choices2": "related",
    "choices3": "name",
    "choices4": "radio-group",
    "answer": "name",
    "explanation": "ラジオボタングループ内の各ラジオボタンは、name属性で関連付けられます。同じname属性の値を持つラジオボタンは、グループ内で1つだけ選択できます。"
  },
  {
    "ID": 128,
    "category": "html",
    "question": "HTMLのinputタグで作るチェックボックスで、checked属性は何を示すものでしょう？",
    "choices1": "チェックボックスのラベル",
    "choices2": "チェックボックスの選択状態",
    "choices3": "チェックボックスの値",
    "choices4": "チェックボックスの名前",
    "answer": "チェックボックスの選択状態",
    "explanation": "チェックボックスのchecked属性は、チェックボックスが初めから選択されているかどうかを示します。"
  },
  {
    "ID": 129,
    "category": "html",
    "question": "HTMLのtextareaタグで作る入力フォームで、rows属性は何を指定するために使用されるでしょう？",
    "choices1": "テキストエリアの背景色",
    "choices2": "テキストエリアのフォントサイズ",
    "choices3": "テキストエリアの横幅",
    "choices4": "テキストエリアの行数",
    "answer": "テキストエリアの行数",
    "explanation": "rows属性は、テキストエリアの表示される行数（高さ）を指定します。"
  },
  {
    "ID": 130,
    "category": "css",
    "question": "CSSの@keyframesで作ったアニメーションを停止するにはどのCSSプロパティを使用しますか？",
    "choices1": "animation-play-state",
    "choices2": "animation-duration",
    "choices3": "animation-timing-function",
    "choices4": "animation-delay",
    "answer": "animation-play-state",
    "explanation": "アニメーションを一時停止または再開するには、\"animation-play-state\"プロパティを使用します。このプロパティに値 \"paused\" を設定すると、アニメーションが停止します。 \"running\" を設定すると、アニメーションが再開されます。"
  },
  {
    "ID": 131,
    "category": "css",
    "question": "CSSのanimation-fill-modeプロパティは何を制御するものでしょう？",
    "choices1": "アニメーションの再生速度",
    "choices2": "アニメーションの遅延",
    "choices3": "アニメーションの名前",
    "choices4": "アニメーションの最初と最後の状態",
    "answer": "アニメーションの最初と最後の状態",
    "explanation": "animation-fill-modeプロパティは、アニメーションが再生前と再生後に要素にどのようなスタイルを適用するかを制御します。このプロパティには「forwards」（最後のキーフレームのスタイルを維持）や「backwards」（最初のキーフレームのスタイルを維持）などの値があります。"
  },
  {
    "ID": 132,
    "category": "css",
    "question": "CSSでtransform-originプロパティを設定しない場合、要素の変形はどの位置を中心に行われますか？",
    "choices1": "要素の左上隅",
    "choices2": "要素の右下隅",
    "choices3": "要素の中央",
    "choices4": "ブラウザウィンドウの中央",
    "answer": "要素の中央",
    "explanation": "\"transform-origin\"プロパティが設定されていない場合、要素の変形はデフォルトで要素の中央を起点に行われます。"
  },
  {
    "ID": 133,
    "category": "css",
    "question": "CSSのperspectiveプロパティは何をするためのものでしょう？",
    "choices1": "要素の回転の中心点を指定する",
    "choices2": "要素の透明度を調整する",
    "choices3": "3D変換の視点距離を指定する",
    "choices4": "要素のサイズを指定する",
    "answer": "3D変換の視点距離を指定する",
    "explanation": "「perspective」プロパティは、3D変換を実行する際の視点距離を指定します。これにより、3D効果を持つ要素をコントロールできます。"
  },
  {
    "ID": 134,
    "category": "css",
    "question": "transform: perspective(500px) rotateY(45deg);は何を行なっていますでしょうか？",
    "choices1": "視点から500ピクセルの距離で要素を45度Y軸に回転させる",
    "choices2": "要素の位置を変更せずに45度Y軸回転を行う",
    "choices3": "視点から500ピクセルの距離で要素を45度X軸に回転させる",
    "choices4": "500pxの正方形を45度傾ける",
    "answer": "視点から500ピクセルの距離で要素を45度Y軸に回転させる",
    "explanation": "このコードは「perspective」プロパティで視点からの距離を設定し、それから「rotateY」変換でY軸周りに45度回転させます。"
  },
  {
    "ID": 135,
    "category": "css",
    "question": "CSSのfilterプロパティで画像をぼかすために使用される関数はどれでしょう？",
    "choices1": "opacity( )",
    "choices2": "brightness( )",
    "choices3": "blur()",
    "choices4": "contrast( )",
    "answer": "blur()",
    "explanation": "\"filter\"プロパティの\"blur\"値は、画像をぼかす効果を追加します。この値はぼかしの強さを指定します。"
  },
  {
    "ID": 136,
    "category": "css",
    "question": "CSSのfilterプロパティで透明度を設定するために使用される関数はどれでしょう？",
    "choices1": "blur()",
    "choices2": "opacity( )",
    "choices3": "grayscale( )",
    "choices4": "hue-rotate( )",
    "answer": "opacity( )",
    "explanation": "\"filter\"プロパティの中で、透明度を設定するためには\"opacity\"が使用されます。この値は0（完全に透明）から1（不透明）までの範囲で設定できます。"
  },
  {
    "ID": 137,
    "category": "css",
    "question": "CSSのfilterプロパティでgrayscale(1)に設定すると何が起こりますか？",
    "choices1": "画像がモノクロになります",
    "choices2": "画像がぼんやりとぼやけます",
    "choices3": "画像の透明度が0になります",
    "choices4": "画像が回転します",
    "answer": "画像がモノクロになります",
    "explanation": "\"grayscale\"値を1に設定すると、画像が完全なモノクロに変換されます。\"grayscale\"の値は0から1までの範囲で、0は無効（カラー）、1は完全なモノクロを表します。"
  },
  {
    "ID": 138,
    "category": "js",
    "question": "JavaScriptのスプレッド構文についての説明として正しいものはどれでしょう？",
    "choices1": "Array.concat() メソッドを使用する",
    "choices2": "Array.join() メソッドを使用する",
    "choices3": "Array.merge() メソッドを使用する",
    "choices4": "スプレッド演算子（...）を使用する",
    "answer": "スプレッド演算子（...）を使用する",
    "explanation": "スプレッド演算子（...）を使用して、配列を結合できます。例: const combinedArray = [...array1, ...array2];"
  },
  {
    "ID": 139,
    "category": "js",
    "question": "JavaScriptのスプレッド構文は主に何を行うために使用されますか？",
    "choices1": "配列またはオブジェクトを削除するため",
    "choices2": "配列またはオブジェクトを展開または結合するため",
    "choices3": "配列内の要素を逆順に並び替えるため",
    "choices4": "文字列型のデータを数値型に変換するため",
    "answer": "配列またはオブジェクトを展開または結合するため",
    "explanation": "スプレッド構文は、配列やオブジェクトの要素を展開し、他の配列やオブジェクトに結合するために使用されます。"
  },
  {
    "ID": 140,
    "category": "js",
    "question": "JavaScriptで使用されるイベントリスナーのメソッドはどれでしょう？",
    "choices1": "onClick",
    "choices2": "onEvent",
    "choices3": "addEventListener",
    "choices4": "listenForEvent",
    "answer": "addEventListener",
    "explanation": "JavaScriptでイベントをリスニングするためには、通常`addEventListener`メソッドを使用します。これは要素に対して特定のイベント（例: 'click', 'change'）にリスナー関数を追加するための方法です。"
  },
  {
    "ID": 141,
    "category": "js",
    "question": "JavaScriptのaddEventListenerを使ったイベント処理で正しい内容はどれでしょう？",
    "choices1": "通常のイベントは子要素から親要素へと伝播します。",
    "choices2": "通常のイベントは親要素から子要素へと伝播します。",
    "choices3": "イベントは伝播しません。",
    "choices4": "イベントは1回しか実行できません。",
    "answer": "通常のイベントは子要素から親要素へと伝播します。",
    "explanation": "イベント伝播には「バブリング」があり、通常は子要素で発生したイベントが親要素に伝播します。"
  },
  {
    "ID": 142,
    "category": "js",
    "question": "JavaScriptで「e.preventDefault( );」は何を行いますか？",
    "choices1": "イベント伝播を停止します。",
    "choices2": "イベントのデフォルトの挙動をキャンセルします。",
    "choices3": "イベントハンドラーを削除します。",
    "choices4": "イベントを一時停止します。",
    "answer": "イベントのデフォルトの挙動をキャンセルします。",
    "explanation": "preventDefault()`メソッドは、通常のイベントの動作（例: フォームの送信、リンクの遷移）をキャンセルするために使用されます。"
  },
  {
    "ID": 143,
    "category": "js",
    "question": "JavaScriptでPromiseのthenメソッドは何を返しますか？",
    "choices1": "コールバック関数",
    "choices2": "Promiseオブジェクト",
    "choices3": "引数",
    "choices4": "イベントタイプ",
    "answer": "Promiseオブジェクト",
    "explanation": "thenメソッドは新しいPromiseオブジェクトを返します。これにより、Promiseチェーンを構築でき、状態の変化やデータの変換を処理できます。"
  },
  {
    "ID": 144,
    "category": "js",
    "question": "JavaScriptのPromiseチェーンにおいてcatch()メソッドは何に使用されますか？",
    "choices1": "プロミスの状態を確認する",
    "choices2": "JSON形式でデータを取得する",
    "choices3": "エラーをキャッチして処理する",
    "choices4": "新しいPromiseを作成する",
    "answer": "エラーをキャッチして処理する",
    "explanation": "catch()メソッドはPromiseチェーン内でエラーが発生した場合に、そのエラーをキャッチして処理するために使用されます。"
  },
  {
    "ID": 145,
    "category": "js",
    "question": "JavaScriptのfetchメソッドを使用してAPIからデータを取得する際、どのようにしてレスポンスのJSONデータを取り出しますか？",
    "choices1": ".text()メソッドを使用",
    "choices2": ".json()メソッドを使用",
    "choices3": ".responseJSONプロパティを使用",
    "choices4": ".parseJSON()メソッドを使用",
    "answer": ".json()メソッドを使用",
    "explanation": "レスポンスオブジェクトからJSONデータを取り出すには、.json()メソッドを使用します。これにより、JSONデータがJavaScriptのオブジェクトに変換されます。"
  },
  {
    "ID": 146,
    "category": "js",
    "question": "JavaScriptのfetchメソッドを使用してHTTPリクエストを送信すると、どのようなオブジェクトを返しますか？",
    "choices1": "JSONオブジェクト",
    "choices2": "レスポンスオブジェクト",
    "choices3": "Promiseオブジェクト",
    "choices4": "オブジェクトは返さない",
    "answer": "Promiseオブジェクト",
    "explanation": "fetchメソッドは、HTTPリクエストを非同期に行い、レスポンスを含むプロミスを返します。このプロミスを使用して、リクエストが成功または失敗した場合に対処できます。"
  },
  {
    "ID": 147,
    "category": "js",
    "question": "JavaScriptの以下のコードでコンソールには何を表示するでしょう？\nconst nums = [2, 1, 4, 5, 3];\nconst result = nums.sort((a, b) => a - b);\nconsole.log(result);",
    "choices1": "[1, 2, 3, 4, 5]",
    "choices2": "5, 4, 3, 2, 1]",
    "choices3": "[1, 3, 5, 2, 4]",
    "choices4": "[5, 3, 1, 2, 4]",
    "answer": "[1, 2, 3, 4, 5]",
    "explanation": "sort()メソッドは、配列の要素を指定された順序に並べ替えるメソッドです。この場合、指定された関数はa - bであり、各要素の値を比較して小さい順に並べ替えます。"
  },
  {
    "ID": 148,
    "category": "その他",
    "question": "次のうち、DNSサーバーの説明として正しい説明はどれでしょう？",
    "choices1": "ウェブサイトのIPアドレスを解決する",
    "choices2": "メールの送受信を中継する",
    "choices3": "ファイルの共有を提供する",
    "choices4": "ネットワークのセキュリティを提供する",
    "answer": "ウェブサイトのIPアドレスを解決する",
    "explanation": "DNSサーバーは、ウェブサイトのURLをIPアドレスに変換する役割を担います。"
  },
  {
    "ID": 149,
    "category": "その他",
    "question": "インターネットのセキュリティ対策として、一般的に用いられている「ファイアウォール」とは、どのようなものですか？",
    "choices1": "ネットワークの通信を制御するための仕組み",
    "choices2": "ネットワークの通信速度を調整するための仕組み",
    "choices3": "ネットワークの通信を暗号化するための仕組み",
    "choices4": "不正アクセスやウイルスなどの脅威からネットワークを保護するための仕組み",
    "answer": "不正アクセスやウイルスなどの脅威からネットワークを保護するための仕組み",
    "explanation": "「ファイアウォール」は、不正アクセスやウイルスなどの脅威からネットワークを保護するための仕組みです。ネットワークの通信を監視し、不正な通信を遮断することで、ネットワークのセキュリティを向上させます。"
  },
  {
    "ID": 150,
    "category": "js",
    "question": "JavaScriptのaddEventListenerメソッドで指定する最初の引数は何を指定するものでしょう？",
    "choices1": "イベントの種類",
    "choices2": "イベントハンドラ関数",
    "choices3": "要素のID",
    "choices4": "イベントのオプション",
    "answer": "イベントの種類",
    "explanation": "addEventListenerメソッドの最初の引数は、どの種類のイベントを監視するかを指定します。たとえば、\"click\"や\"keydown\"などのイベントの種類をここに指定します。"
  },
  {
    "ID": 151,
    "category": "js",
    "question": "JavaScriptのdocumentオブジェクトでcreateElement()メソッドは主に何を行うものでしょう？",
    "choices1": "新しいHTML要素を作成します。",
    "choices2": "既存のHTML要素を削除します。",
    "choices3": "要素のテキストコンテンツを変更します。",
    "choices4": "ウィンドウ内の新しいドキュメントを開きます。",
    "answer": "新しいHTML要素を作成します。",
    "explanation": "document.createElement()メソッドは、指定されたタグ名の新しいHTML要素を作成します。"
  },
  {
    "ID": 152,
    "category": "js",
    "question": "JavaScriptのdocumentオブジェクトでquerySelectorAll()メソッドは主に何を行うものでしょう？",
    "choices1": "ページ内のすべての要素を取得します。",
    "choices2": "CSSセレクタに一致する要素をすべて取得します。",
    "choices3": "要素の子孫を取得します。",
    "choices4": "特定の要素を非表示にします。",
    "answer": "CSSセレクタに一致する要素をすべて取得します。",
    "explanation": "querySelectorAll()メソッドは、指定されたCSSセレクタに一致するすべての要素を取得します。これにより、複数の要素を取得してJavaScriptで操作することができます。"
  },
  {
    "ID": 153,
    "category": "react",
    "question": "ReactフックのuseEffectを使用すると何ができるようにになるでしょう？",
    "choices1": "ステートの更新を行う",
    "choices2": "副作用を処理する",
    "choices3": "コンポーネントの内部スタイルを変更する",
    "choices4": "別のコンポーネントからpropsを受け取る",
    "answer": "副作用を処理する",
    "explanation": "useEffectは、コンポーネントがレンダリングされた後に副作用を処理するために使用されます。例えば、APIリクエスト、購読、クリーンアップなどを行うことができます。"
  },
  {
    "ID": 154,
    "category": "typescript",
    "question": "TypeScriptでジェネリクスを書くときにに使用される記号は何ですか？",
    "choices1": "{}",
    "choices2": "()",
    "choices3": "//",
    "choices4": "<>",
    "answer": "<>",
    "explanation": "ジェネリクスを導入するために、尖括弧 < と > を使用します。ジェネリクス型は通常、関数やクラスの宣言内で <T> のように宣言されます。"
  },
  {
    "ID": 155,
    "category": "typescript",
    "question": "TypeScriptでtypeキーワードは何を定義するために使用されますか？",
    "choices1": "変数",
    "choices2": "関数",
    "choices3": "型エイリアス",
    "choices4": "クラス",
    "answer": "型エイリアス",
    "explanation": "type キーワードは TypeScript で型エイリアスを定義するために使用されます。型エイリアスは、既存の型に別名を付けたり、複雑な型を簡略化したりするのに役立ちます。"
  },
  {
    "ID": 156,
    "category": "typescript",
    "question": "TypeScriptで型エイリアスは主に何に使用されるものでしょう？",
    "choices1": "変数の宣言",
    "choices2": "関数の宣言",
    "choices3": "型情報の再利用と簡略化",
    "choices4": "プロパティの定義",
    "answer": "型情報の再利用と簡略化",
    "explanation": "型エイリアスは、型情報の再利用と簡略化に使用されます。これにより、コードを読みやすくし、型の一貫性を保つのに役立ちます。"
  },
  {
    "ID": 157,
    "category": "html",
    "question": "HTMLの特殊文字で&nbsp; は何を表すものでしょうか？",
    "choices1": "コピーライト",
    "choices2": "段落",
    "choices3": "半角スペース",
    "choices4": "全角スペース",
    "answer": "半角スペース",
    "explanation": "&nbsp; はHTMLで半角スペースを表す特殊文字エンティティです。"
  },
  {
    "ID": 158,
    "category": "css",
    "question": "CSSのorderプロパティは何のために使用されるでしょう？",
    "choices1": "Flexコンテナ内のアイテムの表示順序を制御するため",
    "choices2": "要素の位置を指定するため",
    "choices3": "アニメーションの順序を制御するため",
    "choices4": "フォントの表示順序を制御するため",
    "answer": "Flexコンテナ内のアイテムの表示順序を制御するため",
    "explanation": "orderプロパティは、Flexboxコンテナ内の子アイテムの表示順序を制御するために使用されます。orderの値が小さいほど前に表示され、大きいほど後ろに表示されます。"
  },
  {
    "ID": 159,
    "category": "js",
    "question": "JavaScriptの以下のコードを実行したときにコンソールに表示されるのはどれでしょう？ \n```\n let fruits = [\"apple\", \"orange\", \"banana\", \"grape\"]; let result = fruits.includes(\"banana\"); console.log(result);\n ```",
    "choices1": true,
    "choices2": false,
    "choices3": 2,
    "choices4": "string",
    "answer": true,
    "explanation": "includesメソッドは指定された要素が配列に含まれているかどうかを判定します。\"banana\"はfruits配列に含まれているため、includesはtrueを返します。"
  },
  {
    "ID": 160,
    "category": "js",
    "question": "JavaScriptのfindメソッドは何を返しますか？",
    "choices1": "見つかった要素が格納された新しい配列",
    "choices2": "最初に見つかった要素",
    "choices3": "条件に合致する要素の数",
    "choices4": "配列の中の最小値",
    "answer": "最初に見つかった要素",
    "explanation": "findメソッドは、配列内の要素を先頭から順に検索し、指定されたコールバック関数が true を返す最初の要素を返します。"
  },
  {
    "ID": 161,
    "category": "js",
    "question": "JavaScriptのFileオブジェクトとBlobオブジェクトの主な違いは何ですか？",
    "choices1": "Fileはテキストデータを、Blobはバイナリデータを扱う。",
    "choices2": "Fileは画像データを、Blobは音声データを扱う。",
    "choices3": "Fileはローカルファイルを表し、Blobはメモリ上のデータを表す。",
    "choices4": "Fileは読み取り専用のデータを表し、Blobは書き込み可能なデータを表す。",
    "answer": "Fileはローカルファイルを表し、Blobはメモリ上のデータを表す。",
    "explanation": "Fileオブジェクトは通常、ユーザーが選択したローカルのファイルに関する情報を表します。Blobオブジェクトはバイナリデータを扱うため、メモリ上のデータを表すことができます。"
  },
  {
    "ID": 162,
    "category": "その他",
    "question": "XLSXファイルとCSVファイルの主な違いとして正しい説明はどれでしょう？",
    "choices1": "XLSXはテキストベースで、CSVはバイナリ形式です。",
    "choices2": "XLSXはスプレッドシート形式で、CSVはテキスト形式です。",
    "choices3": "XLSXは単一のセルで、CSVは複数のセルを持っています。",
    "choices4": "XLSXはエクセルで読み込めますがCSVはできません。",
    "answer": "XLSXはスプレッドシート形式で、CSVはテキスト形式です。",
    "explanation": "XLSX（Excel）はMicrosoft Excelのスプレッドシート形式で、バイナリ形式のファイルです。対照的に、CSV（Comma-Separated Values）はテキスト形式で、データがカンマで区切られています。CSVはプレーンなテキスト形式なので、様々なプログラムで簡単に読み書きできます。"
  },
  {
    "ID": 163,
    "category": "css",
    "question": "CSSのtext-wrap: balance;\"は何を意味するものでしょう？",
    "choices1": "テキストの均等なスペース分布",
    "choices2": "テキストの折り返しを最適化",
    "choices3": "テキストの透明度を制御",
    "choices4": "テキストの行間の調整",
    "answer": "テキストの折り返しを最適化",
    "explanation": "\"text-wrap: balance;\"は、テキストを最適な方法で折り返すように指示します。行の長さが均等になるように自動的に調整され、見栄えが向上します。"
  },
  {
    "ID": 164,
    "category": "css",
    "question": "以下のCSSルールはどれを選択するものでしょう？\n\n```\nsection:nth-child(even) {\n  border: 2px solid blue;\n}\n```",
    "choices1": "ページ内の全てのsection要素",
    "choices2": "ページ内の偶数番目のsection要素",
    "choices3": "ページ内の奇数番目のsection要素",
    "choices4": "ページ内の最後のsection要素",
    "answer": "ページ内の偶数番目のsection要素",
    "explanation": "nth-child(even)は偶数番目の要素を選択します。この場合、偶数番目のsection要素に青い境界線が適用されます。"
  },
  {
    "ID": "",
    "category": "css",
    "question": "CSSのnth-of-typeとnth-childの説明として正しいものはどれでしょう？",
    "choices1": "nth-of-typeは要素の種類に基づいて要素を選択し、nth-childは要素の位置に基づいて選択する。",
    "choices2": "nth-of-typeは要素の位置に基づいて要素を選択し、nth-childは要素の種類に基づいて選択する。",
    "choices3": "nth-of-typeとnth-childは同じものであり、異なるシンタックスだけが存在する。",
    "choices4": "nth-of-typeとnth-childはともに使用することができ、選択方法に違いはない。",
    "answer": "nth-of-typeは要素の種類に基づいて要素を選択し、nth-childは要素の位置に基づいて選択する。",
    "explanation": "nth-childは要素の位置に基づいて要素を選択します。例えば、nth-child(2)は要素の2番目を選択するだけです。 nth-of-typeは要素の種類に基づいて要素を選択します。例えば、p:nth-of-type(2)は<p>要素のなかで2番目のものを選択します。"
  },
  {
    "ID": "",
    "category": "js",
    "question": "JavaScriptにおいて、FormDataオブジェクトを使用してフォームデータを取得するためにはどのメソッドを使用しますか？",
    "choices1": "getForm()",
    "choices2": "formData()",
    "choices3": "retrieveFormData()",
    "choices4": "new FormData()",
    "answer": "new FormData()",
    "explanation": "フォームデータを取得するためには、new FormData()を使用します。これにより、対象のフォーム内の要素からデータが取得され、新しいFormDataオブジェクトが生成されます。"
  },
  {
    "ID": "",
    "category": "js",
    "question": "フォームの実装でJavaScriptのFormDataオブジェクトを使用する主なメリットは何でしょう？",
    "choices1": "データの暗号化",
    "choices2": "インターネットの高速化",
    "choices3": "フォームデータの容易な構築と送信",
    "choices4": "メリットはない",
    "answer": "フォームデータの容易な構築と送信",
    "explanation": "FormDataオブジェクトは、HTMLフォームから容易にデータを収集し、それをサーバーに送信するための手段を提供します。これにより、フォームデータを手動で構築する必要がなくなり、簡潔で効果的なコードを書くことができます。"
  },
  {
    "ID": "",
    "category": "js",
    "question": "JavaScriptのFileReaderを使用して読み込んだファイルのデータはどのようにアクセスしますか？",
    "choices1": "file.length",
    "choices2": "file.result",
    "choices3": "file.content",
    "choices4": "file.text",
    "answer": "file.result",
    "explanation": "FileReaderで読み込んだファイルのデータはfile.resultプロパティからアクセスできます。これには、テキストデータの場合は文字列、画像データの場合はデータURLなどが含まれます。"
  },
  {
    "ID": "",
    "category": "js",
    "question": "JavaScriptのFileListは何のために使用されるものでしょう？",
    "choices1": "テキストの検索",
    "choices2": "ファイルの選択と添付",
    "choices3": "画像の表示",
    "choices4": "ページの遷移",
    "answer": "ファイルの選択と添付",
    "explanation": "FileListは、HTMLの<input type=\"file\">要素を使用してユーザーが選択したファイルの情報を格納するオブジェクトです。これを使用することで、JavaScriptを介してユーザーが選択したファイルにアクセスし、処理することができます。"
  }
]
